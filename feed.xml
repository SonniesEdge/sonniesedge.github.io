<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sonniesedge</title>
    <description>The personal site of sonniesedge. Human, web developer, ex-redhead. 
</description>
    <link>http://sonniesedge.co.uk/</link>
    <atom:link href="http://sonniesedge.co.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 29 Dec 2016 13:29:19 +0100</pubDate>
    <lastBuildDate>Thu, 29 Dec 2016 13:29:19 +0100</lastBuildDate>
    <generator>Jekyll v3.3.0</generator>
    
      <item>
        <title>An open letter to the guy who wrote that 'Always Hacking' tweet</title>
        <description>&lt;p&gt;Joe, if you want an insight into why the web industry is so broken, just look at &lt;a href=&quot;https://twitter.com/joemccann/status/812732099027419139&quot;&gt;the tweet&lt;/a&gt; that you wrote on Christmas Eve:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The best software developers I know are always hacking over the holidays. True story.” - &lt;a href=&quot;https://twitter.com/joemccann&quot;&gt;Joe McCann&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Joe, people are angry at this tweet. Can you guess why? Perhaps it’s the implication by you, as a CEO, that anyone not working over the holidays is not good enough? (I &lt;em&gt;know&lt;/em&gt; you didn’t consciously mean it sweetheart_. Shhh, sshhhh, stop talking.). Is it the pushing of the broken narrative that coders “never stop coding”? Is it that the people likely to hacking over the holidays are those &lt;em&gt;privileged enough&lt;/em&gt; to be hacking over the holidays?&lt;/p&gt;

&lt;p&gt;Is it all of the above?&lt;/p&gt;

&lt;p&gt;Joe, if you’re a young single straight man developer - the cliche of tech workers -  then yes, you probably do have plenty of time to be hacking over the holidays. You don’t even question this notion. Going over to your folks and hanging out for a week is a &lt;em&gt;great&lt;/em&gt; opportunity to catch up on some projects, right?&lt;/p&gt;

&lt;p&gt;You know why it’s a great opportunity for the Always Hacking developer? Because someone else is going to be taking on the physical and emotional labour of the festive season for them. The Glorious Young Prodigal Programmer Son will be welcomed home and cooed over. He will be fussed and loved and told how pasty he’s looking. He will be asked “do you have a girlfriend yet?” 5000 times. He will be asked if he’s going to go on holiday anywhere nice. He will be told to eat more.&lt;/p&gt;

&lt;p&gt;Once all the fussing is done he’ll make a token gesture at helping out, because he’s seen enough TV and read enough comics to know that he should:&lt;/p&gt;

&lt;p&gt;“Mum, can I do anything at all?”&lt;/p&gt;

&lt;p&gt;“Oh no, son! Go sit down. It’s just nice to have you here”.&lt;/p&gt;

&lt;p&gt;[son looks around, sees nothing obvious to do, opens up laptop, starts coding on latest project]&lt;/p&gt;

&lt;p&gt;Now, I’m not saying all single young straight man developers are like this. #notallmen, etc. But I am saying that this is just one of the many scenarios where women, mothers, minorities are expected by society to make things appear like they “just happen”. Do you need an analogy, Joe? It’s like a duck, swimming serenely along on a lake. What you don’t see, Joe, is the legs furiously paddling. From above it all looks so easy. From beneath, it’s all hard work.&lt;/p&gt;

&lt;p&gt;Enough with the analogies. Let’s try a real scenario. Now, Joe, imagine the Frumpy Daughter Who Works With Computers For Some Reason coming home (Surprising, I know! There just aren’t that many women in tech, are there? I wonder why, for fucks sake?):&lt;/p&gt;

&lt;p&gt;She will be asked when is she getting married. “Why haven’t you had children yet? The clock is ticking!” She will be told to go make a cup of tea for her father and to help out with the cooking. “By the way can you go visit your Aunty Edna? I’d ask your brother, but he doesn’t like doing it.”&lt;/p&gt;

&lt;p&gt;The Frumpy Daughter Who Works With Computers For Some Reason will always offer to help out, just as the Glorious Prodigal Programmer Always Hacking Son might:&lt;/p&gt;

&lt;p&gt;“Can I help out, mum?”&lt;/p&gt;

&lt;p&gt;“You can go put the washing on. And prep the vegetables. And wrap some presents.”&lt;/p&gt;

&lt;p&gt;She will not be Always Hacking. Because she does not have the time.&lt;/p&gt;

&lt;p&gt;And that is only &lt;em&gt;one&lt;/em&gt; axis of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Kyriarchy&quot;&gt;kyriarchy&lt;/a&gt; pressing down. Seriously Joe, do some reading on this.&lt;/p&gt;

&lt;p&gt;Because do you think a programmer with a disability is happily hacking over the holidays? Or are they trying to make sure their basic needs are met, in a society that wants to hide and push down anybody who is not currently abled?&lt;/p&gt;

&lt;p&gt;Do you think the … Joe, &lt;em&gt;please&lt;/em&gt; stop looking at your tweets and just pay attention … do you think the single mother programmer, raising three kids, is always hacking? Or is she looking after her children and trying to make Christmas a happy time for them?&lt;/p&gt;

&lt;p&gt;Do you thing the LGBT programmer, desperately trying to make emotional bridges with a family who does not understand them, is always hacking? Or are they outside, avoiding their family as much as possible?&lt;/p&gt;

&lt;p&gt;Joe, the reason the “best developers” are “Always Hacking” is because they’re not caring for children, or looking after elderly relatives. They’re not helping out with the basic chores that just “magically happen” around them. They’re not fighting for their right to exist amongst a family and society that despises what they are.&lt;/p&gt;

&lt;p&gt;Let’s rewrite your tweet:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“The most privileged developers I know are most likely to be always hacking over the holidays. True story.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You, Joe, might think that all programmers are living in their gated community, with Soylent deliveries always pending, and their apartments always cleaned by a maid.&lt;/p&gt;

&lt;p&gt;You can fuck off with that view, because it so utterly, utterly wrong.&lt;/p&gt;

&lt;p&gt;Joe, the web industry is based upon code over people. We might occasionally fart inanities like “hacker culture” or “disrupting tech to make the world a better place”, but “better” doesn’t mean what a normal human being might think it to mean.&lt;/p&gt;

&lt;p&gt;“Better” to people like you, and others who espouse similar views, simply means &lt;em&gt;more technology&lt;/em&gt; and &lt;em&gt;more money&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Please, Joe, do not subscribe to this notion. Toss it aside. It will not make you a better person. Get your firm to make time for people. Encourage your programmers to help out with family chores. Get them to focus energy on those who are not as fortunate as them.&lt;/p&gt;

&lt;p&gt;Help them to help others, to make the world a better place. Because technology doesn’t make things better. People do.&lt;/p&gt;

&lt;p&gt;Happy holidays, Joe.&lt;/p&gt;
</description>
        <pubDate>Tue, 27 Dec 2016 13:00:00 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/an-open-letter-to-that-always-hacking-guy</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/an-open-letter-to-that-always-hacking-guy</guid>
        
        
        <category>sjw</category>
        
      </item>
    
      <item>
        <title>Yes, progressive enhancement is a fucking moral argument</title>
        <description>&lt;p&gt;I rolled my eyes when I saw &lt;a href=&quot;https://web.archive.org/web/20161205174122/https://www.viget.com/articles/the-case-against-progressive-enhancements-flimsy-moral-foundation&quot;&gt;this post&lt;/a&gt; circulate around the webosphere. I knew it was clickbait, but I clicked it and read it, because what else is a whiney SJW feminist fuck meant to do while she’s drinking her coffee in the morning? But then, as I scanned the page, I realised what deeper level of fucked-up-ness it represents.&lt;/p&gt;

&lt;p&gt;But let me back up and explain this. First of all, the article by &lt;a href=&quot;http://twitter.com/joshkorr&quot;&gt;@joshkoor&lt;/a&gt; revolves around the central notion that bringing Progressive Enhancement (PE from now on) into our work is a burden on the modern web developer. You see, any site should be able to be rendered 100% in javascript, and that’s &lt;em&gt;okay&lt;/em&gt;. Because the modern user has javascript, and expecting javascript to not be available is just plain pig-headedness. Those whiny PE proponents are making a &lt;em&gt;moral&lt;/em&gt; case for PE, rather than taking a utilitarian and path-of-least-resistance approach.&lt;/p&gt;

&lt;p&gt;Fundamentally, the article is a shitty strawman argument against PE. It erroneously states that PE proponents want the latest canvas-based in-browser game to work with JS turned off. Which is bollocks, because the argument for PE is developing useful apps and sites that achieve core functionality for &lt;em&gt;everyone&lt;/em&gt;, no matter their browser, OS, hardware and user ableness, offering nice-to-haves as the abilities of those things increase. But no, the author has reduced it down to “PE hardliners want everything to work without JS”. (The tech world equivalent of the tabloids shouting “Muslim extremists want YOU to cover up YOUR DAUGHTER!”)&lt;/p&gt;

&lt;h2 id=&quot;let-the-pain-begin&quot;&gt;Let the pain begin&lt;/h2&gt;

&lt;p&gt;First of all, the title of the article:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The Case Against Progressive Enhancement’s Flimsy Moral Foundation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This should more accurately read “The Case &lt;em&gt;For&lt;/em&gt; Progressive Enhancement Is Flimsy Because It Is A Moral Argument”.&lt;/p&gt;

&lt;p&gt;Let’s be clear about this upfront. The author is arguing against PE because it is based on morality trumping practicality. You’ll see why this is fucking problematic as we progress.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;…some PE advocates argue [that] JavaScript should still be used only as an enhancement, and that sites must work without JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Firstly, for content-orientated site, yes I do absolutely fucking argue that.&lt;/p&gt;

&lt;p&gt;Secondly, for webapps, I also absolutely fucking argue that.&lt;/p&gt;

&lt;p&gt;Your startup’s webapp for getting Soylent delivered to your door so that you don’t have to go to the shops and take valuable time from coding with shopping and cooking and other menial, women-orientated, tasks ISN’T SPECIAL. It doesn’t get a free pass, saying “oh, PE is too hard for my delicate coding hands”.&lt;/p&gt;

&lt;p&gt;Even if, like the original author, you discount the moral argument for PE, then you are still left with the practical arguments. The main one of which is: the web is a hostile environment to your code. You do not control the users browser, OS, corporate policy or network speed/latency. You do not control their settings. You do not decide if their phone is old and shitty, or sparkly and new. Unlike all other coders in history, Frontend Developers (FEDs) have to code for a mind-bogglingly huge combination of OS, client app and hardware.&lt;/p&gt;

&lt;p&gt;Progressive Enhancement is about making sure that your code works on a device, no matter the configuration. What’s that? You’re only testing your code on the latest iPhone? You arrogant fuck. &lt;em&gt;Immediately&lt;/em&gt; go out there and start testing it on an old iPhone 4. Or an entry-level Android device. Because someone out there will be using your app on that and cursing you for making such a shitty site. They’ll be cursing you while they’re just trying to book their plane tickets, alone, in a country with limited data, but your site uses React and was only tested on the latest iPhone on office-speed wifi.&lt;/p&gt;

&lt;p&gt;Part of PE means checking to see how your code works on older devices. You should be feature detecting and Cutting the Mustard to offer the best experience, no matter the device. Part of that might mean, horror of fucking horrors, not using JS to accomplish a task. Does a user need React and the rest of a JS app stack when they’re not a byte of memory to spare?&lt;/p&gt;

&lt;p&gt;“Oh, but we’re not catering for those peop… less-advantaged users” you might cry, throwing your loose fingers in the air. HOW THE FUCK DO YOU KNOW THAT, SHIT FOR BRAINS? Your fancy limousine website might be aimed at the richest and most privileged, and fully tested on the latest version of Chrome on a bleeding-edge MacBook, but when your exec is forced to use a shitty hotel-lobby computer to access your site and suddenly it grinds to a halt because those computers are locked down by a contracting IT firm who didn’t want to take any chances with security? What the fuck are you going to tell them then? “oh sorry, I only tested in on a fancy computer”. Idiot.&lt;/p&gt;

&lt;h2 id=&quot;morality-is-hard-mom&quot;&gt;Morality is hard, mom&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;In this post, I want to fully unpack those ideas and make the case that:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Progressive enhancement is a philosophical, moral argument disguised as a practical approach to web development.&lt;/li&gt;
    &lt;li&gt;This makes it impossible to engage with at a practical level.&lt;/li&gt;
    &lt;li&gt;When exposed to scrutiny, that moral argument falls apart.&lt;/li&gt;
    &lt;li&gt;Therefore, if PEers can’t find a different argument, it’s ok for everyone else to get on with their lives.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;“PE is a moral argument and therefore impossible to engage with on a practical level”. You know what that sounds like? That you haven’t got any argument except “I don’t want to do PE”. It’s the same argument that dipshits use to justify not doing accessibility work: “Oh, every time you say you don’t want to do it, they just get angry and you can’t argue”. Of course I get angry. I’ve had enough of this teenage boy selfishness masquerading as adult argument.&lt;/p&gt;

&lt;p&gt;I know that progressive enhancement is harder than just jumping straight in and coding your app in whatever your favourite framework is. But guess what? Being a responsible adult is hard. Caring for others is hard. This fucking world is hard. It’s up to each of us to make it &lt;em&gt;easier&lt;/em&gt; for each other.&lt;/p&gt;

&lt;p&gt;If I ever catch one of your anti-PE, anti-a11y people not doing PE work, but then spending a morning implementing the latest framework in your app, I will personally punch you until your kidneys turn into unicorns.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;But I am an expert at spotting fuzzy rhetoric and teasing out what’s really being said.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, you’re the kind of shit that enjoys arguing with people, rather than empathising with them. The kind of person who says “well, sometimes racism has a cause” or “men and women just have different brains” and expects people to look thoughtful and engage with you, rather than look disgusted and walking out of the room.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here is the real progressive enhancement argument: “It’s a moral imperative that everything on the web should be available to everyone everywhere all the time. Failing to achieve — or at least strive for — that goal is inhumane.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Guess what? I FUCKING SUBSCRIBE TO THAT NOTION. Your shitty Soylent app should be usable even by the non-white-manboy-developers of the world (not that they’d fucking want to use it). Are you really saying that you’re incapable of coding a HTML form that submits a delivery address to some server-side code and stores it? REALLY? Because I can fucking well do that and I am &lt;em&gt;definitely&lt;/em&gt; not one of the coding elite.&lt;/p&gt;

&lt;p&gt;No, you’re saying that:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;a) you don’t want to code it, or;&lt;/li&gt;
  &lt;li&gt;b) you’re not allowed to code it.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don’t want to code it then you’re a lazy fuck. Morally lazy. No, you fucking are. If you don’t want to write code that might work for a minority of people in bad situations, then you’re morally corrupt. I’m sick of coddling peoples feelings on this. Just grow a fucking moral spine, you shit.&lt;/p&gt;

&lt;p&gt;If, however, you’re not ALLOWED to code it… well, that’s still a shitty situation, but at least understandable. I’ve been there. I’ve had bosses who would not authorise devs to do PE “unless the client pays for it” (we did it anyway, when we could).&lt;/p&gt;

&lt;p&gt;That’s capitalism for you. If it can fuck over a group of people and still make a profit, it’ll do it.&lt;/p&gt;

&lt;p&gt;If your arguments against PE revolve around not having the time to do it, or not being allowed to do it, then your arguments are not with PE. They’re with a shitty company that values money over people. They’re with capitalism itself, which is either going to die, or eat the world. Stop whining about PE and start arguing against capitalism.&lt;/p&gt;

&lt;h2 id=&quot;its-all-or-nothing-in-my-world&quot;&gt;It’s all or nothing in my world&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Unstated assumptions:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;A clunky experience is always better than no experience.&lt;/li&gt;
    &lt;li&gt;HTML content — i.e. text, images, unstyled forms — is the most important part of most websites.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Really? You want to argue that HTML content is not the most important part of your site? Because what the fuck else is a site but those things? Do you think you can just put up an input field where people can enter their credit card details? That they’ll just fill that in an send it to you? Fuck off. You need content, images, text to justify your app and your shitty business.&lt;/p&gt;

&lt;p&gt;And of course a fucking clunky experience is better than no experience. What are you, the experience police? I don’t see you giving a shit about experience when it comes to the edge cases that you think PE people are whining about.&lt;/p&gt;

&lt;p&gt;I’d rather be able to do something on your site, than nothing at all. I’d rather submit a HTML form and have my data saved than the all-or-nothing experience of my browser failing to load up the latest JS that submits serialised data to a API endpoint, but which didn’t fucking load because my 3G provider is shit.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Everything beyond HTML content is superfluous fanciness.&lt;/li&gt;
    &lt;li&gt;It’s morally problematic if some users cannot access features built with JavaScript.&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fuck this shit. I’m just printing the author’s avatar out and using it as a fucking dartboard.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Assemble those unstated assumptions and you get the real PE argument: universal access to everything on the web is a moral imperative.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Shitting piss, you say “morality” like it’s some kind of dirty word.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;That’s a philosophical argument, not a practical approach to web development.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No, it means you have to get off your lazy fucking arse and do something for people other than yourself and your whitecodebro demographic. You need to give a shit about people in poor connectivity regions, people who are stuck on older browsers that they can’t upgrade, people in orgs with draconian lockdowns.&lt;/p&gt;

&lt;p&gt;I’m not going to quote the rest of this shitty article because you can go read it yourself and make your morality bleed out of your skull.&lt;/p&gt;

&lt;p&gt;No, what I’m going to do is explicitly link this kind of shitty attitude with the rest of the shit that’s been going on in the world the last few months.&lt;/p&gt;

&lt;p&gt;We’ve just seen far-right capitalist white nationalism - fascism by any other word - coming out of closet again. It’s been hiding for 70 years, but it’s back and now it’s got the internet as a delivery method. These kinds of articles are, ultimately, playing into this fascist rhetoric.&lt;/p&gt;

&lt;p&gt;Before you look agog, or pull a face at that statement, just listen to me. The “alt-right” (the fucking fascists) have been among us for years. They were gamergate. They were the internet trolls. They were the fedora-wearing fucks who always felt friend-zoned. They were white guy who felt hurt that he didn’t have to think about anybody but himself. They were the able-bodied people who parked in disabled bays because “they’re just faking it anyway”. They were the people who read the Daily Mail and believe its hate. They were the friends who told racist jokes and then defended it with “not got a sense of humour, love?”&lt;/p&gt;

&lt;p&gt;And now they’re here again, as the people who don’t give a shit about the “difficult people” who might be using their shitty application. They’re the people who say “I’m only talking about javascript here” but mean “why do I have to bother about accessibility?”. They’re the coders who want to JUST SHIP CODE rather than thinking about, or having any empathy for, others. They’re half people, bereft of empathy or kindness. They’re the people running the web.&lt;/p&gt;

&lt;p&gt;These people say “But if you take away the moral argument, why should you care about PE or a11y?”.&lt;/p&gt;

&lt;p&gt;THE MORAL ARGUMENT &lt;em&gt;IS&lt;/em&gt; THE FUCKING ARGUMENT, YOU FEDORA-WEARING SHITBEAN.&lt;/p&gt;

&lt;p&gt;I’m sick of this shit. I’m sick of developers thinking they’re the pinnacle of things. I’m sick of the lack of empathy that’s a core part of our industry. I’m going to fight it. I’m going to be angry about it.&lt;/p&gt;

&lt;p&gt;I ask that you be angry about it too.&lt;/p&gt;
</description>
        <pubDate>Tue, 06 Dec 2016 13:00:00 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/progressive-enhancement</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/progressive-enhancement</guid>
        
        
      </item>
    
      <item>
        <title>My favourite frontend development podcasts</title>
        <description>&lt;p&gt;I love me some podcasts. I travel everywhere by bicycle and I need something to keep my brain occupied while I do so, so I queue up some podcasts and have them ready to go whenever I get on my bike - my earphones and phone are always in my pocket.&lt;/p&gt;

&lt;p&gt;Podcasts are vital for me, as I don’t tend to read blogs or read Twitter that often, so I easily miss out on the latest news and trends in the FED world.&lt;/p&gt;

&lt;h2 id=&quot;shoptalk-show&quot;&gt;Shoptalk show&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://shoptalkshow.com/&quot;&gt;http://shoptalkshow.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Presented by &lt;a href=&quot;https://twitter.com/davatron5000&quot;&gt;Dave Rupert&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/chriscoyier&quot;&gt;Chris Coyier&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m not sure how Dave and Chris manage to churn this show out, but every week a new 1 hour show emerges, and it’s always something to look forward to. Sometimes the shows are centered on special guests and a particular topic, while others are rapid fire shows, where they answer questions on FED tech, process and business sent in by listeners.&lt;/p&gt;

&lt;p&gt;It’s always a pleasure to listen to and &lt;em&gt;always&lt;/em&gt; informative, and it has been wonderful to see Dave and Chris grow and learn about issues of diversity and intersectionality. When you hear a show that used to feature macho machine-gun noises and dude jokes now ask for show donations to be made to &lt;a href=&quot;http://www.blackgirlscode.com/&quot;&gt;Black Girls Code&lt;/a&gt;, you know progress in this industry is possible.&lt;/p&gt;

&lt;h2 id=&quot;toolsday&quot;&gt;Toolsday&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.toolsday.io/&quot;&gt;http://www.toolsday.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Presented by &lt;a href=&quot;https://twitter.com/Una&quot;&gt;Una Kravets&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/chrisdhanaraj&quot;&gt;Chris Dhanaraj&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re greeted at the start of every episode by Una singing about FED. This is a &lt;em&gt;good&lt;/em&gt; thing. Una and Chris spend each 20 minute show covering topics surrounding the technical side of FED. So one episode might be ES2015, while another might discuss standards and linters. Definitely a good one for getting up to speed on the (sometimes frustratingly) broad topics that make up FED.&lt;/p&gt;

&lt;h2 id=&quot;ttl&quot;&gt;TTL&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://ttlpodcast.com/&quot;&gt;http://ttlpodcast.com/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Presented by &lt;a href=&quot;https://twitter.com/rmurphey&quot;&gt;Rebecca Murphey&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’ve just started listening to this, and I’m already hooked. Between 40 minutes and an hour long, this show has Rebecca talking to a guest about their area of expertise and the work that they do. This results in excellent insider secrets and tips being unearthed in every episode.&lt;/p&gt;

&lt;h2 id=&quot;style-guide-podcast&quot;&gt;Style Guide Podcast&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://styleguides.io/podcast&quot;&gt;http://styleguides.io/podcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Presented by &lt;a href=&quot;https://twitter.com/anna_debenham&quot;&gt;Anna Debenham&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/brad_frost&quot;&gt;Brad Frost&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Style Guide Podcast is pretty heavy, dealing with the process and business angles of building and maintaining company-wide style guides. But set aside an hour to listen to the show and you’ll get some valuable insights into maintaining style guides and pattern libraries at scale.&lt;/p&gt;

&lt;h2 id=&quot;responsive-design-podcast&quot;&gt;Responsive Design Podcast&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://responsivedesign.is/podcast&quot;&gt;http://responsivedesign.is/podcast&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Presented by &lt;a href=&quot;https://twitter.com/justinavery&quot;&gt;Justin Avery&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Coming out every 2 - 4 weeks, Justin’s show is a great way of keeping up with trends in the web industry. Each show is highly variable in length and content, but it’s always informative.&lt;/p&gt;

&lt;h2 id=&quot;percent-invisible&quot;&gt;99 Percent Invisible&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://99percentinvisible.org/&quot;&gt;http://99percentinvisible.org/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Presented by &lt;a href=&quot;https://twitter.com/romanmars&quot;&gt;Roman Mars&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Not actually FED, but this is a podcast that delivers delicious 20 minute chunks about the design that we miss in our everyday lives.&lt;/p&gt;

&lt;h2 id=&quot;responsive-web-design&quot;&gt;Responsive Web Design&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://responsivewebdesign.com/podcast/&quot;&gt;http://responsivewebdesign.com/podcast/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Presented by &lt;a href=&quot;https://twitter.com/karenmcgrane&quot;&gt;Karen McGrane&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/beep&quot;&gt;Ethan Marcotte&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Karen and Ethan spend around 20 minutes each episode talking to the people who make responsive web designs happen. While some of us might take RWD to be a given now, it is still being rolled our in large organisations and in big corporate redesigns. This show gives some great insights into the people and tech processes behind this.&lt;/p&gt;

&lt;p&gt;So there you go. Check them out in your podcatcher of choice.&lt;/p&gt;

&lt;p&gt;Incidentally, while I’d never try to simultaneously ride a bicycle and listen to anything while cycling in London, because you need 100% of your wits about you due to the Daily Mail-reading, hate-filled, HGV drivers &lt;em&gt;literally&lt;/em&gt; trying to kill you, I have no problem doing so in Berlin.&lt;/p&gt;

&lt;p&gt;Berlin is, in every aspect bar queueing (where it is 100% German), utterly chill. So while I wait at lights, avoid pedestrians in the cycle lanes, and am busy getting shaken to death on Berlin’s randomly cobbled streets, I probably have one of these shows playing in a solitary ear.&lt;/p&gt;
</description>
        <pubDate>Sat, 29 Oct 2016 14:50:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/my-favourite-frontend-development-podcasts</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/my-favourite-frontend-development-podcasts</guid>
        
        
      </item>
    
      <item>
        <title>Auto-publishing via npm version</title>
        <description>&lt;p&gt;So, I’m supposed to be prepping for an interview right now, but I had to write this down before I forget as it is SO FUCKING COOL.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://npmjs.org&quot;&gt;npm&lt;/a&gt; has an amazing feature called &lt;code class=&quot;highlighter-rouge&quot;&gt;npm version&lt;/code&gt;. Using an argument your can change the &lt;a href=&quot;http://semver.org/&quot;&gt;semver&lt;/a&gt; version number in your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt; file and automatically create a commit for that new version.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm version 1.1.5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cool, huh?&lt;/p&gt;

&lt;p&gt;Well, it gets cooler…&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm version patch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;…will automatically increment the patch number in your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;, meaning you don’t even have to remember it. Similarly, &lt;code class=&quot;highlighter-rouge&quot;&gt;npm version minor&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;npm version major&lt;/code&gt; will bump the minor and major versions.&lt;/p&gt;

&lt;p&gt;But it gets even cooler. Add the following to your &lt;code class=&quot;highlighter-rouge&quot;&gt;package.json&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;postversion&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;git push &amp;amp;&amp;amp; git push --tags &amp;amp;&amp;amp; npm publish&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;npm will now, after already incrementing and creating a commit, &lt;em&gt;create a new tag, push the new tag and publish the new version of your package!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So after I’ve made some bugfix commits, all I have to do is type&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm version patch
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;and I get a whole new published package, a commit in git and a new release tag.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=AX0X-s2wuaU&quot;&gt;Oberaffengeil&lt;/a&gt;!&lt;/p&gt;

&lt;div class=&quot;o-fixed-ratio&quot;&gt;
  &lt;iframe class=&quot;o-fixed-ratio__inner&quot; allowfullscreen=&quot;0&quot; scrolling=&quot;no&quot; width=&quot;788&quot; height=&quot;443&quot; frameborder=&quot;0&quot; src=&quot;https://www.youtube.com/embed/AX0X-s2wuaU?autoplay=0&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 08 Oct 2016 15:30:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/npm-version</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/npm-version</guid>
        
        
      </item>
    
      <item>
        <title>Setting the scope for Loom</title>
        <description>&lt;p&gt;&lt;em&gt;Writing the core of &lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt; has been extraordinary fun, and I’ll be sharing some of the thought processes and techniques behind it with you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what did I want from a new framework?&lt;/p&gt;

&lt;p&gt;I didn’t want make it &lt;em&gt;too&lt;/em&gt; broad. I know I want the user to do anything with it, but you could go too far with that, you know? I mean, the ultimate do-anything-you-want Sass/CSS framework is a bunch of mixins that can be used to write your own code. (Hell, the &lt;em&gt;ultimate&lt;/em&gt; framework is blank text-file). Multi-contributor, sponsored projects like &lt;a href=&quot;https://github.com/thoughtbot/bourbon/&quot;&gt;Bourbon&lt;/a&gt; are already out there and do things 1000x better than a single developer ever could.&lt;/p&gt;

&lt;p&gt;On the other hand, things like &lt;a href=&quot;http://purecss.io/&quot;&gt;Pure&lt;/a&gt; are just too restrictive. You just want me to include a CSS file and use your classes? Nah, mate.&lt;/p&gt;

&lt;p&gt;No, I had to think about what &lt;em&gt;I’d&lt;/em&gt; like to see from a CSS framework, and go from there. That’s the reason most open-source projects get started, no?&lt;/p&gt;

&lt;h1 id=&quot;put-your-thoughts-down-in-writing&quot;&gt;Put your thoughts down in writing&lt;/h1&gt;
&lt;p&gt;I had all these ideas buzzing around my head for Loom, but nothing concrete or any stated goals, so I sat down and came up with the following manifesto points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should make things &lt;em&gt;easier&lt;/em&gt; for a developer like me. So, if I were to end up configuring a framework more than using it, it’s pointless. If each time I use it I ended up overriding the classes with my own, it’s not fulfilling it’s job.&lt;/li&gt;
  &lt;li&gt;This isn’t about themes. I’m not aiming to recreate Foundation or Bootstrap here. I want a framework that could be used to &lt;em&gt;produce&lt;/em&gt; a CSS library like Bootstrap.&lt;/li&gt;
  &lt;li&gt;Following from the previous point, this should be aimed at people like me, professional frontenders. This isn’t something to be be picked up and dropped into a project to make it look pretty. This is something to help professional designer/developers in their everyday tasks.&lt;/li&gt;
  &lt;li&gt;I love design systems, and I want something that ties in with that. I want to be able to write code that lends itself to pattern libraries and styleguides. You know, that whole idea of producing &lt;a href=&quot;http://daverupert.com/2013/04/responsive-deliverables/&quot;&gt;a mini-Bootstrap for each client&lt;/a&gt;, as Dave Rupert talks about. So this framework needs some way of easily accessing design system settings, such as spacings, colour palettes, typography, etc.&lt;/li&gt;
  &lt;li&gt;I wanted to be write CSS in the way that I want to write it. This doesn’t just mean naming conventions, but the way that CSS classes are used. Which end of the Atomic vs Component spectrum do I want to swing to? Do I have to make that choice?&lt;/li&gt;
  &lt;li&gt;Modularity. The problem with many CSS libraries is that they get imported all in one go and don’t offer any selectivity. You end up having to overwrite their CSS classes with your own.&lt;/li&gt;
  &lt;li&gt;Enforce some best practice with regard to specificity. One of the few things I really don’t like to see in CSS is overly-nested selectors and the emergence of specificity wars - it’s the bane of most projects I’ve come into. Whatever system I came up with should help avoid that.&lt;/li&gt;
  &lt;li&gt;Recognise that most developers don’t stick rigidly to any particular methodology. Most people end up with a hybrid of many approaches, something that works for them. Any framework should have flexibility for that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;thinking-technically&quot;&gt;Thinking technically&lt;/h1&gt;
&lt;p&gt;After looking at these manifesto points it became so much easier to decide on the technical architecture of things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I didn’t want to offer something themed. There’s a multitude of &lt;strike&gt;Wordpress themes&lt;/strike&gt; pattern libraries already out there that do that. I wanted a loose collection of objects and utilities to help others build a pattern library.&lt;/li&gt;
  &lt;li&gt;I definitely wanted to use ITCSS, right from the start. It allows enormous flexibility for structuring code while avoiding specificity wars. It’s not documented very well, but I could address that in the framework documentation.&lt;/li&gt;
  &lt;li&gt;I wanted to let the consumer decide if they want to output chunky components or lighter utility classes. I can’t say I prefer using utility classes, but I can utterly see the value.&lt;/li&gt;
  &lt;li&gt;I wanted to use BEM of for naming. But I was still unsure at this initial point about if I wanted to force this on end users.&lt;/li&gt;
  &lt;li&gt;I wanted to make sure everything would be modular. I think this came naturally from wanting to use ITCSS - it’s designed to allow the insertion or modification of modules and layers, and is what drew me to it initially.&lt;/li&gt;
  &lt;li&gt;I wanted it to be documented. There’s nothing more frustrating than a framework that you don’t have full information for. I’d always wanted to use SassDocs so I went for that.&lt;/li&gt;
  &lt;li&gt;Because of my design system love, I wanted to get that incorporated from the start. That meant everything should be standardised into Sass variables where possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;so-what-next&quot;&gt;So what next?&lt;/h1&gt;

&lt;p&gt;That set the scope for what I wanted to achieve, but comes after that? Check back soon for the next part, “Organizing the Code”.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Oct 2016 15:30:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/loom-setting-the-scope</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/loom-setting-the-scope</guid>
        
        
      </item>
    
      <item>
        <title>Introducing Loom</title>
        <description>&lt;p&gt;So, I thought it’d be a great idea to write my own CSS framework. This is the kind of thinking that occurs when I’ve had too much caffeine (file this alongside my other caffeine-based projects, such as “Why not repaint the apartment?” and “Try abseiling down an industrial chimney”).&lt;/p&gt;

&lt;p&gt;I was inspired by writing an in-house framework for a previous client. It was eventually used on several major projects, but was relatively inflexible, written as it was for one use-case and for a certain way of writing code.&lt;/p&gt;

&lt;p&gt;“So,” I thought to myself, “what if I were to write my own, something that could output any type of CSS code, in whatever way the user wanted to use it?”&lt;/p&gt;

&lt;p&gt;Think large, and swing hard, you know?&lt;/p&gt;

&lt;h1 id=&quot;introducing-loom&quot;&gt;Introducing Loom&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt; is a Sass framework for producing your own pattern libraries. It’s still in alpha, but already it provides a series of OOCSS bricks, mixins, functions and classes that allow you to quickly put together a pattern library of your own, ready to use on a real website. Aimed at professional web developers, it aims to make your life &lt;em&gt;easier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s designed to be light, flexible, modular and just enough opinions to ensure that it runs smoothly.&lt;/p&gt;

&lt;h1 id=&quot;why-build-something-else&quot;&gt;Why build something else?&lt;/h1&gt;

&lt;p&gt;Oh, it was partly for the fun, but mainly because I wanted to produce something that was actually &lt;em&gt;useful&lt;/em&gt;. Loom doesn’t try to give you pre-made and pre-themed CSS that can be dropped onto a site, the way Zurb Foundation or Twitter Bootstrap libraries do. It gives you a toolkit, a way of making your own pattern libraries. A way to weave your own patterns. Yeah, clever.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt; is written in Sass and is based upon the ITCSS layered architecture. It uses BEM for its (optional) object and utility classes. It’s deliberately written in a way that discourages Sass nesting and avoids CSS specificity battles, by returning to source order as the way of describing specificity. This makes it perfect for use in multi-developer teams where the threat of “just add a multi-level selector to the end of the stylesheet to make it work” is ever present.&lt;/p&gt;

&lt;h1 id=&quot;why-use-it&quot;&gt;Why use it?&lt;/h1&gt;

&lt;p&gt;Dave Rupert nailed it when he said client work was about “&lt;a href=&quot;http://daverupert.com/2013/04/responsive-deliverables/&quot;&gt;producing a series of mini-Bootstraps&lt;/a&gt;”. As developer-designers, we should be delivering complete pattern-libraries that describe how a clients site can be used, and which can be used to grow the site styles, get a visually overview and to attach testing.&lt;/p&gt;

&lt;p&gt;Loom is grounded in &lt;a href=&quot;http://atomicdesign.bradfrost.com/chapter-1/&quot;&gt;Design System thinking&lt;/a&gt; and is aimed at helping you to create your own &lt;a href=&quot;http://alistapart.com/blog/post/getting-started-with-pattern-libraries&quot;&gt;pattern libraries&lt;/a&gt;. This is vital when you’re working on multi-page, multi-author sites, where you don’t get to craft each page artisanally yourself, but instead rely on authors and CMSs to generate a page.&lt;/p&gt;

&lt;p&gt;The framework knows about design systems, and so comes pre-equpped with variables, mixins and functions that can be used to extract standard thematic elements for your site. Annoyed by developers using &lt;code class=&quot;highlighter-rouge&quot;&gt;color: #52BE80&lt;/code&gt; in the middle of a class? Well now you can encourage them to use &lt;code class=&quot;highlighter-rouge&quot;&gt;color: get-color(brand-green)&lt;/code&gt; instead, and keep things clean.&lt;/p&gt;

&lt;h1 id=&quot;how-do-you-use-it&quot;&gt;How do you use it?&lt;/h1&gt;
&lt;p&gt;There’s two ways of using &lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt;. You can use the (entirely optional) Object and Utility classes to quickly scaffold out a site.&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o-h-alpha u-margin-none&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Good morning humans of Earth&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-color-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;We find you disturbing&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or you can use the mixins provided to create your own atomic components and apply them to your HTML. Perfect for creating robust and lasting pattern libraries!&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.c-header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.c-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.c-meta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Good morning humans of Earth&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;We find you disturbing&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that Objects are added to Components via &lt;code class=&quot;highlighter-rouge&quot;&gt;@include&lt;/code&gt;, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;@extend&lt;/code&gt;. This is a conscious choice. &lt;code class=&quot;highlighter-rouge&quot;&gt;@extend&lt;/code&gt; is extremely unpredictable with how it can affect source order, and would undermine the functionality of Loom. &lt;code class=&quot;highlighter-rouge&quot;&gt;@include&lt;/code&gt; introduces a lot of repetition, but this is eliminated when the final CSS is used on a page, as gzip will compress repeated lines of text to nothing.&lt;/p&gt;

&lt;h1 id=&quot;encouraging-a-common-way-of-working&quot;&gt;Encouraging a common way of working&lt;/h1&gt;

&lt;p&gt;Loom aims to help your team work together. It’s designed to be used with style linting systems, and to be consumed by automated styleguide generators and regression testing systems.&lt;/p&gt;

&lt;p&gt;When you tie in a stylelinting system like &lt;a href=&quot;https://github.com/stylelint/stylelint&quot;&gt;stylelint&lt;/a&gt; and &lt;a href=&quot;https://github.com/postcss/postcss-bem-linter&quot;&gt;BEM Linter&lt;/a&gt; you have an extremely robust system that should catch any code that strays from your house style.&lt;/p&gt;

&lt;p&gt;The outputted visual components are perfect for integrating with pattern library documentation systems, such as &lt;a href=&quot;http://patternlab.io/&quot;&gt;PatternLab&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;fully-documented&quot;&gt;Fully documented&lt;/h1&gt;

&lt;p&gt;Loom is fully documented, using &lt;a href=&quot;http://sassdoc.com/&quot;&gt;SassDoc&lt;/a&gt;. You can look through the included documentation to see what variables, functions and mixins are available out of the box.&lt;/p&gt;

&lt;h1 id=&quot;take-a-look&quot;&gt;Take a look&lt;/h1&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;find Loom on Github&lt;/a&gt;. Please feel free to take a look and start trying it out. I’m really happy to hear suggestions and ideas!&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Oct 2016 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/introducing-loom-a-new-framework</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/introducing-loom-a-new-framework</guid>
        
        
      </item>
    
      <item>
        <title>Deploying a compiled site to a personal Github Pages account</title>
        <description>&lt;p&gt;Having recently switched to using &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; to host this site I thought I’d quickly note down how I overcame some of the limitations of the Github Pages when it comes to using modern build processes.&lt;/p&gt;

&lt;p&gt;Github Pages is a free &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll-based&lt;/a&gt; hosting service offered by Github. You can create a repository called WHATEVER.github.io and via a lot of internal magic a static website of the same name appears, built from the Jekyll project hosted there. It’s Github taking over the build process step for you.&lt;/p&gt;

&lt;p&gt;Difficulties arise when you hit some of the limits imposed by Github Pages on the way Jekyll can be used. For security reasons Github &lt;a href=&quot;https://help.github.com/articles/adding-jekyll-plugins-to-a-github-pages-site/&quot;&gt;doesn’t allow most third-party gems to be run&lt;/a&gt; on Github Pages, nor does it allow any Gulp/Grunt/npm build scripts to be run on their servers. This is totally understandable - that kind of stuff would be a huge security nightmare.&lt;/p&gt;

&lt;p&gt;The lack of third-party gems and build scripts means that a lot of modern &lt;a href=&quot;https://css-tricks.com/gulp-for-beginners/&quot;&gt;website build techniques&lt;/a&gt; are not available to people using Github Pages. For example, there is no way to get CSS auto-prefixing to work on there, as the &lt;a href=&quot;https://github.com/ai/autoprefixer-rails&quot;&gt;Autoprefixer gem&lt;/a&gt; is not allowed, nor can you run Autoprefixer via &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Postcss&lt;/a&gt; on their server.&lt;/p&gt;

&lt;p&gt;Okay, yeah, you could set up your site in such a way as to generate your compiled Jekyll pages and CSS into a static site, intermixed with your Jekyll code and store that on your github account. You’d also have to pull in all your npm/Bower dependencies and store them in your repo as well. A working solution, but not an elegant solution one.&lt;/p&gt;

&lt;p&gt;But there is another way. You can still use Jekyll, and your modern build process, but you &lt;em&gt;only&lt;/em&gt; publish the compiled static site to Github pages.&lt;/p&gt;

&lt;p&gt;The trick is to use two repositories, hosting your automated, advanced, super-whizzy site source on a separate repository from your WHATEVER.githubpages.io repository. You then use a script to build a static site from your source and publish the generated static site as a commit to your WHATEVER.githubpages.io repository. You then get the advantages of Jekyll as a CMS, a modern build process from Gulp/Grunt, no compiled CSS in your source repo and you get to bypass the build limitations of Github Pages.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is with the &lt;a href=&quot;https://github.com/shinnn/gulp-gh-pages&quot;&gt;gulp-gh-pages&lt;/a&gt; npm package. It allows you to specify a build directory where your compiled site is built to and a repository where the site should be pushed. It will then take this compiled site, clone it to another folder, and create a commit from everything in that folder, pushing it to Github.&lt;/p&gt;

&lt;p&gt;This package can also be used on organisational and project Github pages, which allow a branch on the same repository to be used as a source for serving the site (I’m unsure why Github don’t allow this on Personal sites). In that case you specify the same repo, but use a different branch (by default it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;) to serve your static site.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge-website&quot;&gt;source for this site&lt;/a&gt;, compared to the compiled code in the &lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge.github.io&quot;&gt;sonniesedge.github.io repository&lt;/a&gt; to see the difference and to note the &lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge-website/blob/master/gulpfile.js&quot;&gt;build/deploy script&lt;/a&gt; used to produce one from the other.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Sep 2016 19:57:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/deploying-a-compiled-site-to-github-pages</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/deploying-a-compiled-site-to-github-pages</guid>
        
        
      </item>
    
      <item>
        <title>Twitter image accessibility</title>
        <description>&lt;p&gt;&lt;em&gt;UPDATE: March 29 2016. &lt;a href=&quot;https://blog.twitter.com/2016/accessible-images-for-everyone&quot;&gt;Twitter have announced&lt;/a&gt; that they will support a limited amount of alt text on images posted to twitter. Unfortunately they will not be enforcing alt text or using AI to determine what is in an image.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I just switched to using a command-line Twitter client and I was again reminded about how limiting it is to use Twitter when you cannot see the images contained in a tweet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/twitter-accessibility/twitter_pixelated.png&quot; alt=&quot;Screenshot of my twitter client, Rainbowstream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://www.rainbowstream.org/&quot;&gt;RainbowStream&lt;/a&gt;, tweets with images show up heavily pixellated. Obviously this is a limitation of being a skinny-jeaned hipster and using a command-line client.&lt;/p&gt;

&lt;p&gt;But what about if you don’t have a choice of how you see Twitter? What if your eyesight is impaired in some way? Even if you’re working around this with large text, or a screen-reader, there’s still a good chance that an image would be unviewable.&lt;/p&gt;

&lt;p&gt;This isn’t too much of a problem if people are posting images as accessories to their tweets. But if they’re screencapping chunks of texts, from books, sites or other tweeted conversations, &lt;em&gt;and not linking back to the originals&lt;/em&gt; then that suddenly becomes a very alienating experience for you.&lt;/p&gt;

&lt;p&gt;To help people understand, I’ve quickly scribbled a bookmarklet that makes images inaccessible to fully-sighted users. Just drag the following to your browser bookmark menu and click it when on twitter dot com.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:(function(){javascript:(function(){var newcss='.cards-media-container img {-webkit-filter: blur(10px); filter: blur(10px);}';if(&amp;quot;\v&amp;quot;==&amp;quot;v&amp;quot;){document.createStyleSheet().cssText=newcss}else{var tag=document.createElement(&amp;quot;style&amp;quot;);tag.type=&amp;quot;text/css&amp;quot;;document.getElementsByTagName(&amp;quot;head&amp;quot;)[0].appendChild(tag);tag[(typeof document.body.style.WebkitAppearance==&amp;quot;string&amp;quot;)?&amp;quot;innerText&amp;quot;:&amp;quot;innerHTML&amp;quot;]=newcss}})();})();&quot; style=&quot;padding: 1em; background-color: lightgray; margin-top: 1em; margin-bottom: 1em; display: inline-block;&quot;&gt;Twitter blurred images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your images should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/twitter-accessibility/twitter_blurred.png&quot; alt=&quot;A blurred image from twitter.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try and use it regularly and remind yourself about how tweets and images work when your ability to see images is limited.&lt;/p&gt;

&lt;p&gt;I know Twitter itself is rubbish and halts attempts at accessibility. It’s criminal that it doesn’t provide a way to provide alt text and vexing that there’s no way to embed chunks of text. But until we build up a broad-conciousness of how inaccessible it is and for us all to begin to pressure it, nothing will change.&lt;/p&gt;

&lt;h2 id=&quot;top-tips&quot;&gt;Top tips&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You can still use images, even for screencaps - just &lt;em&gt;provide an alternative&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;If you’re posting images of text, then also put a copy on a Github Gist: https://gist.githubusercontent.com/SonniesEdge/6c0edb64969f94c4bf0c/raw&lt;/li&gt;
  &lt;li&gt;If you’re linking to a series of tweets, then also Storify them and link to that.&lt;/li&gt;
  &lt;li&gt;If you’re posting a photo, try and describe it in the text, or make your tweet work &lt;em&gt;without&lt;/em&gt; having to see the image.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 13:00:16 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/twitter-image-accessibility</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/twitter-image-accessibility</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Ich bin ein Berliner</title>
        <description>&lt;p&gt;Three years ago, when I first met my partner, I knew that she wanted to move to Berlin. I didn’t think anything of it back then, as I was in the first lovely flushes of a relationship, was still in a whirlwind of discovering my new home of London, and didn’t know what the future might hold in the next week, let alone years in the future.&lt;/p&gt;

&lt;p&gt;To be frank, I never thought it would actually happen. But here I am now, with the same wonderful woman, packing up the last of our belongings as we prepare to move across Europe to another city.&lt;/p&gt;

&lt;p&gt;So why am I doing it? Well, love for one thing. I’ve seen enough bad things in my life to know that a true loving relationship is a precious thing, and that you’ll do anything to be with that person. If my partner said she wanted to move to Tasmania, I’d be clamping down on the spider fears and buying a cork hat. If she said she wanted to go to Greenland, I’d be taking snowmobile lessons and learning Kalaallisut.&lt;/p&gt;

&lt;p&gt;Happily however, we both want to move to Berlin and in reality our relationship isn’t as unbalanced that either of us would drag the other to somewhere they might hate. If I didn’t want to move there, we’d both find a compromise and do something else.&lt;/p&gt;

&lt;p&gt;But visiting Berlin during &lt;a href=&quot;http://2014.cssconf.eu&quot;&gt;CSSconf.eu 2014&lt;/a&gt; gave me my own reason to move. I found myself in a beautiful, weird, dirty, relaxed, sexy city. It’s got a quiet confidence that I’ve never experienced before, a centeredness that lets it and its population do whatever they want, with no care of what anybody else thinks.&lt;/p&gt;

&lt;p&gt;It’s the polar opposite of London. It’s an unpleasant truth that perhaps this move isn’t just about going somewhere, but perhaps more about where we are leaving. London has been good to me these last few years. There’s lots of jobs here in my area of work, and its filled with interesting things to do, but it’s a hard place to &lt;em&gt;live&lt;/em&gt;. The competition for housing means that &lt;a href=&quot;http://www.theguardian.com/money/2014/jan/27/renting-london-costs-twice-elsewhere&quot;&gt;rental prices are through the roof&lt;/a&gt;, cycling here &lt;a href=&quot;http://en.wikipedia.org/wiki/Cycling_in_London#2013_deaths&quot;&gt;is mortally dangerous&lt;/a&gt;, people are more concerned about their Twitter profiles than making friends and beer costs £5/€7 a pint. Add to that a resurgent Conservative government, increasing xenophobia and that particularly British obsession with owning property, &lt;a href=&quot;http://www.huffingtonpost.co.uk/2015/05/01/london-house-prices_n_7187450.html&quot;&gt;despite most London properties being unaffordable&lt;/a&gt;, and you have a place that suddenly feels very alien and very unpleasant.&lt;/p&gt;

&lt;p&gt;This all makes me more angry than sad, as I could spend a lifetime exploring London; I have friends here; and I resent being forced out of a place that has become home. But I need to leave. This place doesn’t feel like home any longer, but more like somewhere to survive.&lt;/p&gt;

&lt;p&gt;Luckily I’m privileged enough that I’ve already signed for a new job in Berlin. Once I’ve finished my contract at the BBC I’ll be moving over to &lt;a href=&quot;http://bitcrowd.net&quot;&gt;Bitcrowd&lt;/a&gt;, a small software agency in Kreuzberg. I’ve visited them and they’re absolutely lovely. It’ll be a wonderful change working in a large, airy and light office - a far cry from the current cramped noisy conditions that London seems to encourage.&lt;/p&gt;

&lt;p&gt;I’m also lucky that most young Berliners speak my native language, so I’ll be able to learn German while still being able to temporarily communicate in English.&lt;/p&gt;

&lt;p&gt;Am I going to stay in Berlin permanently? Frankly, I don’t know. I’m still a EU citizen (&lt;a href=&quot;http://en.wikipedia.org/wiki/Proposed_referendum_on_United_Kingdom_membership_of_the_European_Union&quot;&gt;at least for now&lt;/a&gt;) and I’m able to live anywhere in that beautiful region. Beyond that there’s an entire planet. So who knows?&lt;/p&gt;

&lt;p&gt;Just as I didn’t know what the future would bring back in 2012, I don’t know what it will bring for me three years on from now, in 2018.&lt;/p&gt;

&lt;p&gt;But I’m excited to find out.&lt;/p&gt;

</description>
        <pubDate>Thu, 21 May 2015 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/berlin</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/berlin</guid>
        
        <category>berlin</category>
        
        <category>moving</category>
        
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>Data Visualisations</title>
        <description>&lt;p&gt;I understand the fascination with data visualisation now. This morning my colleague showed me what he was doing with some of the data we had gathered from the general election and - I can’t lie - I got a bit excited over it.&lt;/p&gt;

&lt;p&gt;As a result I’ve spent the afternoon playing with D3 and the raw data, and I’ve learned some useful things. Sadly I can’t share any code with you, as the data it relies on is owned by the BBC and I can’t republish it (by design D3 requires a publically accessible JSON file to work from). But I can share a screenshot of what I quickly made with D3 and the election data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/data-visualisations/size-vs-turnout.png&quot; alt=&quot;Screenshot of a scatter graph representing voter turnout vs constituency population size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s interesting to consider the adage “&lt;a href=&quot;https://twitter.com/EmmaKennedy/status/596478834788044802&quot;&gt;Tories always vote&lt;/a&gt;” when looking at this scatter graph. It certainly shows that voter turnout was higher in constituencies where Tories won.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2015 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/data-visualisations</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/data-visualisations</guid>
        
        <category>d3</category>
        
        
        <category>web</category>
        
      </item>
    
  </channel>
</rss>
