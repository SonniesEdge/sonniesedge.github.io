<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sonniesedge</title>
    <description>Sonniesedge writes things for the love of it.
</description>
    <link>http://sonniesedge.co.uk/</link>
    <atom:link href="http://sonniesedge.co.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Oct 2016 17:02:36 +0200</pubDate>
    <lastBuildDate>Sat, 01 Oct 2016 17:02:36 +0200</lastBuildDate>
    <generator>Jekyll v3.0.3</generator>
    
      <item>
        <title>Twitter image accessibility</title>
        <description>&lt;p&gt;&lt;em&gt;UPDATE: March 29 2016. &lt;a href=&quot;https://blog.twitter.com/2016/accessible-images-for-everyone&quot;&gt;Twitter have announced&lt;/a&gt; that they will support a limited amount of alt text on images posted to twitter. Unfortunately they will not be enforcing alt text or using AI to determine what is in an image.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I just switched to using a command-line Twitter client and I was again reminded about how limiting it is to use Twitter when you cannot see the images contained in a tweet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/twitter-accessibility/twitter_pixelated.png&quot; alt=&quot;Screenshot of my twitter client, Rainbowstream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://www.rainbowstream.org/&quot;&gt;RainbowStream&lt;/a&gt;, tweets with images show up heavily pixellated. Obviously this is a limitation of being a skinny-jeaned hipster and using a command-line client.&lt;/p&gt;

&lt;p&gt;But what about if you don’t have a choice of how you see Twitter? What if your eyesight is impaired in some way? Even if you’re working around this with large text, or a screen-reader, there’s still a good chance that an image would be unviewable.&lt;/p&gt;

&lt;p&gt;This isn’t too much of a problem if people are posting images as accessories to their tweets. But if they’re screencapping chunks of texts, from books, sites or other tweeted conversations, &lt;em&gt;and not linking back to the originals&lt;/em&gt; then that suddenly becomes a very alienating experience for you.&lt;/p&gt;

&lt;p&gt;To help people understand, I’ve quickly scribbled a bookmarklet that makes images inaccessible to fully-sighted users. Just drag the following to your browser bookmark menu and click it when on twitter dot com.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:(function(){javascript:(function(){var newcss=&#39;.cards-media-container img {-webkit-filter: blur(10px); filter: blur(10px);}&#39;;if(&amp;quot;\v&amp;quot;==&amp;quot;v&amp;quot;){document.createStyleSheet().cssText=newcss}else{var tag=document.createElement(&amp;quot;style&amp;quot;);tag.type=&amp;quot;text/css&amp;quot;;document.getElementsByTagName(&amp;quot;head&amp;quot;)[0].appendChild(tag);tag[(typeof document.body.style.WebkitAppearance==&amp;quot;string&amp;quot;)?&amp;quot;innerText&amp;quot;:&amp;quot;innerHTML&amp;quot;]=newcss}})();})();&quot; style=&quot;padding: 1em; background-color: lightgray; margin-top: 1em; margin-bottom: 1em; display: inline-block;&quot;&gt;Twitter blurred images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your images should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/twitter-accessibility/twitter_blurred.png&quot; alt=&quot;A blurred image from twitter.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try and use it regularly and remind yourself about how tweets and images work when your ability to see images is limited.&lt;/p&gt;

&lt;p&gt;I know Twitter itself is rubbish and halts attempts at accessibility. It’s criminal that it doesn’t provide a way to provide alt text and vexing that there’s no way to embed chunks of text. But until we build up a broad-conciousness of how inaccessible it is and for us all to begin to pressure it, nothing will change.&lt;/p&gt;

&lt;h2 id=&quot;top-tips&quot;&gt;Top tips&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You can still use images, even for screencaps - just &lt;em&gt;provide an alternative&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;If you’re posting images of text, then also put a copy on a Github Gist: https://gist.githubusercontent.com/SonniesEdge/6c0edb64969f94c4bf0c/raw&lt;/li&gt;
  &lt;li&gt;If you’re linking to a series of tweets, then also Storify them and link to that.&lt;/li&gt;
  &lt;li&gt;If you’re posting a photo, try and describe it in the text, or make your tweet work &lt;em&gt;without&lt;/em&gt; having to see the image.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 13:00:16 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/twitter-image-accessibility</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/twitter-image-accessibility</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Ich bin ein Berliner</title>
        <description>&lt;p&gt;Three years ago, when I first met my partner, I knew that she wanted to move to Berlin. I didn’t think anything of it back then, as I was in the first lovely flushes of a relationship, was still in a whirlwind of discovering my new home of London, and didn’t know what the future might hold in the next week, let alone years in the future.&lt;/p&gt;

&lt;p&gt;To be frank, I never thought it would actually happen. But here I am now, with the same wonderful woman, packing up the last of our belongings as we prepare to move across Europe to another city.&lt;/p&gt;

&lt;p&gt;So why am I doing it? Well, love for one thing. I’ve seen enough bad things in my life to know that a true loving relationship is a precious thing, and that you’ll do anything to be with that person. If my partner said she wanted to move to Tasmania, I’d be clamping down on the spider fears and buying a cork hat. If she said she wanted to go to Greenland, I’d be taking snowmobile lessons and learning Kalaallisut.&lt;/p&gt;

&lt;p&gt;Happily however, we both want to move to Berlin and in reality our relationship isn’t as unbalanced that either of us would drag the other to somewhere they might hate. If I didn’t want to move there, we’d both find a compromise and do something else.&lt;/p&gt;

&lt;p&gt;But visiting Berlin during &lt;a href=&quot;http://2014.cssconf.eu&quot;&gt;CSSconf.eu 2014&lt;/a&gt; gave me my own reason to move. I found myself in a beautiful, weird, dirty, relaxed, sexy city. It’s got a quiet confidence that I’ve never experienced before, a centeredness that lets it and its population do whatever they want, with no care of what anybody else thinks.&lt;/p&gt;

&lt;p&gt;It’s the polar opposite of London. It’s an unpleasant truth that perhaps this move isn’t just about going somewhere, but perhaps more about where we are leaving. London has been good to me these last few years. There’s lots of jobs here in my area of work, and its filled with interesting things to do, but it’s a hard place to &lt;em&gt;live&lt;/em&gt;. The competition for housing means that &lt;a href=&quot;http://www.theguardian.com/money/2014/jan/27/renting-london-costs-twice-elsewhere&quot;&gt;rental prices are through the roof&lt;/a&gt;, cycling here &lt;a href=&quot;http://en.wikipedia.org/wiki/Cycling_in_London#2013_deaths&quot;&gt;is mortally dangerous&lt;/a&gt;, people are more concerned about their Twitter profiles than making friends and beer costs £5/€7 a pint. Add to that a resurgent Conservative government, increasing xenophobia and that particularly British obsession with owning property, &lt;a href=&quot;http://www.huffingtonpost.co.uk/2015/05/01/london-house-prices_n_7187450.html&quot;&gt;despite most London properties being unaffordable&lt;/a&gt;, and you have a place that suddenly feels very alien and very unpleasant.&lt;/p&gt;

&lt;p&gt;This all makes me more angry than sad, as I could spend a lifetime exploring London; I have friends here; and I resent being forced out of a place that has become home. But I need to leave. This place doesn’t feel like home any longer, but more like somewhere to survive.&lt;/p&gt;

&lt;p&gt;Luckily I’m privileged enough that I’ve already signed for a new job in Berlin. Once I’ve finished my contract at the BBC I’ll be moving over to &lt;a href=&quot;http://bitcrowd.net&quot;&gt;Bitcrowd&lt;/a&gt;, a small software agency in Kreuzberg. I’ve visited them and they’re absolutely lovely. It’ll be a wonderful change working in a large, airy and light office - a far cry from the current cramped noisy conditions that London seems to encourage.&lt;/p&gt;

&lt;p&gt;I’m also lucky that most young Berliners speak my native language, so I’ll be able to learn German while still being able to temporarily communicate in English.&lt;/p&gt;

&lt;p&gt;Am I going to stay in Berlin permanently? Frankly, I don’t know. I’m still a EU citizen (&lt;a href=&quot;http://en.wikipedia.org/wiki/Proposed_referendum_on_United_Kingdom_membership_of_the_European_Union&quot;&gt;at least for now&lt;/a&gt;) and I’m able to live anywhere in that beautiful region. Beyond that there’s an entire planet. So who knows?&lt;/p&gt;

&lt;p&gt;Just as I didn’t know what the future would bring back in 2012, I don’t know what it will bring for me three years on from now, in 2018.&lt;/p&gt;

&lt;p&gt;But I’m excited to find out.&lt;/p&gt;

</description>
        <pubDate>Thu, 21 May 2015 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/berlin</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/berlin</guid>
        
        <category>berlin</category>
        
        <category>moving</category>
        
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>Data Visualisations</title>
        <description>&lt;p&gt;I understand the fascination with data visualisation now. This morning my colleague showed me what he was doing with some of the data we had gathered from the general election and - I can’t lie - I got a bit excited over it.&lt;/p&gt;

&lt;p&gt;As a result I’ve spent the afternoon playing with D3 and the raw data, and I’ve learned some useful things. Sadly I can’t share any code with you, as the data it relies on is owned by the BBC and I can’t republish it (by design D3 requires a publically accessible JSON file to work from). But I can share a screenshot of what I quickly made with D3 and the election data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/data-visualisations/size-vs-turnout.png&quot; alt=&quot;Screenshot of a scatter graph representing voter turnout vs constituency population size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s interesting to consider the adage “&lt;a href=&quot;https://twitter.com/EmmaKennedy/status/596478834788044802&quot;&gt;Tories always vote&lt;/a&gt;” when looking at this scatter graph. It certainly shows that voter turnout was higher in constituencies where Tories won.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2015 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/data-visualisations</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/data-visualisations</guid>
        
        <category>d3</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Food at tech events</title>
        <description>&lt;p&gt;You’ve never noticed the food at tech events.&lt;/p&gt;

&lt;p&gt;No seriously, you haven’t. Not unless you’ve got some kind of dietary restriction.&lt;/p&gt;

&lt;p&gt;It’s always pizza that’s served. Always.* It’s really frustrating to see pizza lying around everywhere, and knowing that as one of those special-snowflake coeliacs, you can’t eat any of it. (As I type this, my stomach is growling as the smell of hot pizza wafts under my nostrils).&lt;/p&gt;

&lt;p&gt;At least there’s normally vegetarian stuff around. Even if it’s only margherita, in case vegetables scare the carnivores.&lt;/p&gt;

&lt;p&gt;I’m not asking for a 100% wheat-free, vegetarian, vegan, halal and fruitarian smorgasbord. But how about trying something different? Tacos, or sushi maybe?&lt;/p&gt;

&lt;p&gt;* Actually, I lie - &lt;a href=&quot;https://twitter.com/ldn_sass&quot;&gt;LDN Sass&lt;/a&gt; did provide mexican food.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Dec 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/food-tech-events</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/food-tech-events</guid>
        
        
        <category>food</category>
        
      </item>
    
      <item>
        <title>Writing for sitepoint is a thing that I do now</title>
        <description>&lt;p&gt;In a big move for me, I’ve started writing articles for &lt;a href=&quot;http://sitepoint.com&quot;&gt;Sitepoint.com&lt;/a&gt;. My first featured piece is &lt;a href=&quot;http://www.sitepoint.com/migrating-team-sass/&quot;&gt;Migrating a Team to Sass&lt;/a&gt;, where I talk about… migrating a team to Sass. (There are no surprises in that title).&lt;/p&gt;

&lt;p&gt;It’s really nice to see it linked up via&lt;a href=&quot;http://css-weekly.com/issue-138/&quot;&gt;CSS Weekly&lt;/a&gt;, &lt;a href=&quot;http://lullabot.com&quot;&gt;Lullabot&lt;/a&gt;’s &lt;a href=&quot;http://tinyletter.com/front-end-rapport/letters/front-end-rapport-21&quot;&gt;Front-end Rapport&lt;/a&gt; and the always lovely &lt;a href=&quot;http://sassnews.com&quot;&gt;SassNews&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s to more writing! :D&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Nov 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/writing-sitepoint</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/writing-sitepoint</guid>
        
        
        <category>sitepoint</category>
        
      </item>
    
      <item>
        <title>Providing a fallback for critical-path CSS</title>
        <description>&lt;p&gt;The method I recently talked about using, for &lt;a href=&quot;/2014-10-27/critical-css.html&quot;&gt;loading non-critical CSS asynchronously&lt;/a&gt; via javascript, has one blindingly obvious fatal flaw: it fails when javascript is disabled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/providing-a-fallback-for-criticalpath-css/shutup.gif&quot; alt=&quot;Shut up.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is why you test things, kids.&lt;/p&gt;

&lt;p&gt;But there’s a simple way around it: provide a regular link to your CSS, but wrap it in a &amp;lt;noscript&amp;gt; tag.&lt;/p&gt;

&lt;p&gt;So, in addition to the existing LoadCSS chunk:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Async CSS loader&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;link&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;only x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;loadCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/theme/dist/stylesheets/main.css&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;we just have to add:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/theme/dist/stylesheets/main.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the criticalpath CSS is no longer reliant on javascript executing. Just as it should be.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Nov 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/providing-fallback-criticalpath-css</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/providing-fallback-criticalpath-css</guid>
        
        
        <category>css</category>
        
        <category>criticalpath</category>
        
      </item>
    
      <item>
        <title>Making this site open</title>
        <description>&lt;p&gt;I remember what it was like when I was starting out with this web game. I didn’t have a clue how to build things, how to write code, how to optimise. Like all of us, I was clueless. What got me rapidly going was being able to look at the code of other sites via dev tools, and see how they did things.&lt;/p&gt;

&lt;p&gt;But that’s only part of the story. All you’re seeing there is generated code, not the code responsible for generating the site in the first place? How are new entrants to the field meant to learn if most things are hidden to them?&lt;/p&gt;

&lt;p&gt;It’s in that spirit that I’m making the source code for this site available publically, after it living for a year as a private Github repo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge-site&quot;&gt;https://github.com/SonniesEdge/sonniesedge-site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not going to blow anybody’s mind, but it will hopefully benefit others on their jouney to see at least one more website being completely open.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Oct 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/making-site-open</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/making-site-open</guid>
        
        
      </item>
    
      <item>
        <title>Inlining critical CSS</title>
        <description>&lt;p&gt;Lately I’ve been playing with &lt;a href=&quot;https://github.com/filamentgroup/loadCSS&quot;&gt;LoadCSS&lt;/a&gt; from Filament Group. It’s a wonderful system for asynchronously loading CSS, therefore removing a blocking resource from your page loads.&lt;/p&gt;

&lt;p&gt;The only snag I’ve hit with it is the FOUC - a Flash Of Unstyled Content, caused by the HTML of the site loading before the heavier CSS asynchronously loads. To get around this there are known techniques for &lt;a href=&quot;https://developers.google.com/speed/pagespeed/service/PrioritizeCriticalCss&quot;&gt;inlining critical CSS&lt;/a&gt; in the header of a page.&lt;/p&gt;

&lt;p&gt;A sprinkle of critical CSS in the header ameliorates the FOUC, and while the page still has to redraw after the heavy CSS finishes loading, the effect is nowhere near as noticeable as going from totally unstyled to fully styled in one flash. It comes across more as a progressive load, than as a whoah-what-the-fuck-was-that?&lt;/p&gt;

&lt;p&gt;Many articles advocate analysing a page to determine what critical CSS needs to be inlined, so as to prevent a FOUC. This is a lot of faff, requiring analysis of each page of a site and rebuilds whenever a page or CSS changes.&lt;/p&gt;

&lt;h2 id=&quot;taking-control&quot;&gt;Taking control&lt;/h2&gt;

&lt;p&gt;Personally, I think it’s better to manually control critical CSS. By having a critical.css stylesheet, styles that form the backbone of a site - typography, spacing, perhaps some basic grids - can be pulled in from Sass components.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
|- critical.scss
|-- _normalize.scss
|-- _typography.scss
|-- _simplegrids.scss

|- main.scss
|-- _grids.scss
|-- _component-1.scss
|-- _component-2.scss
|-- etc
|-- etc
|-- etc
|-- etc

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These can then be referenced as usual from your HTML.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/theme/css/critical.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;“But hang on”, you say, “the critical.css stuff still isn’t inlined, is it, you twonk?”. You’re correct, my friend. To inline the critical.css we need to turn to a Grunt plugin to help us out.&lt;/p&gt;

&lt;p&gt;There are a few plugins out there that purport to inline critical CSS files. I’ve tried a few, eager to get my personal site blazing fast. But sadly none of them seem to work as advertised. They either try to do too much (inlining &lt;em&gt;all&lt;/em&gt; CSS) or try to keep it simple, but break on such simple thinks as file-globbing.&lt;/p&gt;

&lt;p&gt;To that end, I’ve ended up writing my own. Say hello to &lt;a href=&quot;https://www.npmjs.org/package/grunt-inlinestyles&quot;&gt;grunt-inlinestyles&lt;/a&gt;! It’s a simple Grunt plugin that looks for any links to stylesheets that include the data-attribute “data-inline”. If it finds it, it inlines the CSS directly into the HTML.&lt;/p&gt;

&lt;p&gt;It still needs some work to be perfect. At the moment it only works on pure HTML files. I’ll be improving it soon so that it works on generic HTML templates (such as those found in Rails, Drupal, Wordpress), but currently it works just great on smaller static-site generators.&lt;/p&gt;

&lt;p&gt;It also requires you to do some analysis of what is considered critical on your site - it won’t do this for you. But I consider this its strength - learning what aspects of your CSS are critical, and which are not can only lead to more efficient and well-structure sites.&lt;/p&gt;

&lt;p&gt;Please, try &lt;a href=&quot;https://www.npmjs.org/package/grunt-inlinestyles&quot;&gt;grunt-inlinestyles&lt;/a&gt; out and let me know what you think.&lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.npmjs.org/package/grunt-inlinestyles&quot;&gt;https://www.npmjs.org/package/grunt-inlinestyles&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/filamentgroup/loadCSS&quot;&gt;https://github.com/filamentgroup/loadCSS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Mon, 27 Oct 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/inlining-critical-css</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/inlining-critical-css</guid>
        
        
        <category>css</category>
        
      </item>
    
      <item>
        <title>Visual Regression Testing</title>
        <description>&lt;h2&gt;Why the hell do we need tests for CSS?&lt;/h2&gt;

&lt;p&gt;Pulling down the latest code from your repo, you see that one of your team has added some new features. &quot;Great!&quot;, you think, as you compile the code, switch to your browser and hit refresh.&lt;/p&gt;

&lt;p&gt;But what.... &lt;em&gt;horror&lt;/em&gt; is this? The site is &lt;em&gt;broken&lt;/em&gt;. Elements look bloated, the navigation icons are wrapping around each other, the search box is making a break for the border and where the hell have your grids gone?&lt;/p&gt;

&lt;p&gt;In a fury you dig into the code to seek the cause of this living hell and  discover this atrocity at the end of your compiled CSS file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It really doesn&#39;t matter how it was added. A poorly scoped partial in Sass, a junior developer seeking to quick fix a problem or those darned magic space pixies in the server. The effect is the same: the padding of every &amp;lt;div&amp;gt; on the website is changed to 5px.&lt;/p&gt;

&lt;p&gt;In Proper Software Land, this is called a &lt;em&gt;regression&lt;/em&gt;, a bug introduced by something else changing on the system. In this case, that final rule was added, introducing the global padding problem - a &lt;em&gt;visual&lt;/em&gt; regression.&lt;/p&gt;

&lt;p&gt;Being an unscoped language, CSS is especially prone to these types of regressions. With everything effectively in the global context it takes an intimate knowledge of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity&quot;&gt;selector specificity&lt;/a&gt; and code ordering to keep everything from falling over.&lt;/p&gt;

&lt;h2&gt;Visual regression tools&lt;/h2&gt;

&lt;p&gt;Catching these visual regressions has traditionally been achieved by eyeballing - everyone watches what their code does, and hopefully notices if it messes anything else up. This is fine for smaller sites, but once you start to scale above a certain point, it becomes unwieldy. There&#39;s simply no way that a few people can audit thousands of pages across a large site.&lt;/p&gt;

&lt;p&gt;Pushing these duties to frontend leads and a QA team doesn&#39;t help either. In fact, you&#39;re just loading the team problem onto fewer people. Eyeballing is simply time-ineffective.&lt;/p&gt;

&lt;p&gt;No, what you want to provide are methods for a team member to write code themselves and have confidence that their code doesn&#39;t introduce bugs. Other languages have these tools, so why doesn&#39;t CSS?&lt;/p&gt;

&lt;p&gt;What we need is a way of &lt;em&gt;formally&lt;/em&gt; testing for regressions. We need regression testing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The intent of regression testing is to ensure that changes have not introduced new faults. One of the main reasons for regression testing is to determine whether a change in one part of the software affects other parts of the software.&lt;/p&gt;

&lt;p&gt;- &lt;a href=&quot;http://en.wikipedia.org/wiki/Regression_testing&quot;&gt;http://en.wikipedia.org/wiki/Regression_testing&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Back when I started down this road in January of this year, only a few references to CSS regression testing tools were out there. The big mama of the time was &lt;a href=&quot;https://github.com/BBC-News/wraith&quot;&gt;Wraith&lt;/a&gt;, written by the BBC News team. There was some pioneering work done there, especially with regression testing of live sites (via comparisons of Git branches to live code). But time moves on, and the one that really caught my eye was &lt;a href=&quot;https://github.com/Huddle/PhantomCSS&quot;&gt;PhantomCSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I&#39;m going to talk about PhantomCSS a lot here, as it&#39;s my tool of choice. But remember, this is a rapidly moving field. Check out &lt;a href=&quot;http://csste.st/&quot;&gt;csste.st&lt;/a&gt; for &lt;em&gt;lots&lt;/em&gt; of information on other visual regression tools.&lt;/p&gt;

&lt;h2&gt;A simple visual regression test with PhantomCSS&lt;/h2&gt;

&lt;p&gt;Effectively an extension of the &lt;a href=&quot;http://casperjs.org/&quot;&gt;CasperJS&lt;/a&gt; library, which is itself built upon the &lt;a href=&quot;http://phantomjs.org/&quot;&gt;PhantomJS&lt;/a&gt; engine, PhantomCSS is a javascript library that allows fully automated regression testing of your stylesheets.&lt;/p&gt;

&lt;p&gt;Given a unique CSS selector, PhantomCSS will use the headless Webkit browser provided by PhantomJS to take a screenshot of the selector target. This is referred to as the &lt;em&gt;Baseline&lt;/em&gt; screenshot. Let&#39;s pinch an example from the PhantomCSS documentation and take a screenshot of the following code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;machine&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;coffeemachine&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;p&amp;gt;&lt;/span&gt;What would you like?&lt;span class=&quot;nt&quot;&gt;&amp;lt;/p&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-large btn-primary&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cappuccino-button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Cappuccino&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;btn btn-large btn-primary&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;espresso-button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Espresso&lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Here&#39;s the resulting snapshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/coffeemachine.png&quot; alt=&quot;Screenshot of the previous code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This in itself isn&#39;t too useful, except perhaps as a fancy-schmancy screenshot tool. No, the power comes from making a code change to the screenshotted element (screenshotted is &lt;em&gt;so&lt;/em&gt; a word), running PhantomCSS again and letting PhantomCSS look for differences.&lt;/p&gt;

&lt;p&gt;Say another member of the team were to make a change to the &quot;.machine&quot; class, not realising that &quot;#coffeemachine&quot; depended upon &quot;.machine&quot; for most of its styling:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nc&quot;&gt;.machine&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;110%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If this team member were to run PhantomCSS again (as part of their testing) they would get a great big stonking error alert in their console and the following diff image would be generated:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/coffeemachine_diff.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The pink areas show the visual diff between the original baseline image and the post-change  screenshot. Pretty neat, huh? A simple automated test shows that a CSS change has caused a regression in the page output.&lt;/p&gt;

&lt;h2&gt;Getting started with PhantomCSS&lt;/h2&gt;

&lt;p&gt;So how do we use Visual Regression Testing in a real world workflow?&lt;/p&gt;

&lt;h3&gt;Installation&lt;/h3&gt;

&lt;p&gt;PhantomCSS depends on the PhantomJS engine, so you need to get that installed on your system. If you wish, you can download and install it &lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;manually&lt;/a&gt;. But I&#39;m lazy, and on my Mac I prefer to install things like this via &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  brew install casperjs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Carrying on the laziness theme, I&#39;d recommend adding CasperJS and PhantomCSS libraries to your project via a project manager like npm or Bower. They&#39;re there to take the load off you, and it&#39;ll be easier to update them in the future. But you can do it manually, if you&#39;re into the kinky stuff.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Grunt-phantomcss&lt;/em&gt; is a lovely wrapper around PhantomCSS and lets us avoid the hassle of setting up links to PhantomCSS and CasperJS. I&#39;m going to use it here, but it&#39;s not necessary. I like it because I&#39;ve got the Grunt bug.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;npm install grunt-phantomcss --save-dev
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will install CasperJS, PhantomCSS, grunt-phantomcss and all their dependencies as npm modules into our project directory and will update the &lt;strong&gt;package.json&lt;/strong&gt; resource file appropriately.&lt;/p&gt;

&lt;p&gt;To finish up the installation, let&#39;s edit &lt;strong&gt;Gruntfile.js&lt;/strong&gt; to tell Grunt to load the grunt-phantomcss task:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;grunt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadNpmTasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;grunt-phantomcss&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yeah baby! Now we&#39;ve got the engines and libraries installed we&#39;re ready to start using PhantomCSS!&lt;/p&gt;

&lt;!-- BTW, if you&#39;d like to follow along at home you can [download]() some demo files that I prepared earlier. --&gt;

&lt;h3&gt;Configure your test subject&lt;/h3&gt;

&lt;p&gt;Firstly, we need something to test. This is a simple demo, so let&#39;s just use a single HTML page, with some inline CSS.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;utf-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Visual Regression Testing&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;viewport&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;width=device-width, initial-scale=1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;#aardvark&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;200px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#dcdcdc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aardvark&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The page should render like this in Chrome:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/browser_initial.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Writing your first test&lt;/h3&gt;

&lt;p&gt;Create a file called &lt;strong&gt;desktop.js&lt;/strong&gt; (although this can be called whatever you want, as long as you reference it correctly). Populate it with the following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;targeturi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;http://locahost:4000&#39;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;targeturi&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aardvark&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#aardvark&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;targeturi&lt;/strong&gt; is a URI. (e.g. &#39;http://localhost&#39; or &#39;file://C:\myfile.html&#39;). Sorry, but it can&#39;t be a system path or a relative URL - these ain&#39;t valid URIs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;title&lt;/strong&gt; is a basic string. It will be used to save your screenshot files to disk, so make sure it&#39;s something compatible with your filesystem. No need to specify a path for now.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;testsubject&lt;/strong&gt; is a CSS selector. We&#39;ll go over formal naming conventions for this later.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That&#39;s your test written! But as we&#39;re using Grunt to control this test, we need to hook it up. In your &lt;strong&gt;Gruntfile.js&lt;/strong&gt;, add the following &lt;a href=&quot;http://gruntjs.com/configuring-tasks&quot;&gt;config options&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;desktop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;screenshots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;tests/visual/source/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;tests/visual/results/&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;viewportSize&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;768&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;caspertests.js&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What we&#39;ve done here is tell Grunt to create a main PhantomCSS task, with a &quot;desktop&quot; subtask inside that, and to supply both with a bunch of config options. As normal with Grunt, we can extend this any number of subtasks, all of which you can access via &lt;strong&gt;&quot;grunt taskname:subtaskname&quot;&lt;/strong&gt;. Very useful for testing different viewport sizes!&lt;/p&gt;

&lt;p&gt;Config options for this are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;screenshots&lt;/strong&gt; is a system path. Tells PhantomCSS where to save the baseline screenshots.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;results&lt;/strong&gt;: is a system path. Tells PhantomCS where to save the screenshots of every subsequent test run.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;viewportSize&lt;/strong&gt; is an array. Indicates the size of the viewport for testing, in pixels.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;src&lt;/strong&gt;: is a path. Tells PhantomCSS where to grab the actual tests from.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once this is done we&#39;re ready to run our first PhantomCSS test.&lt;/p&gt;

&lt;h3&gt;Bringing it all together&lt;/h3&gt;

&lt;p&gt;Excited? Tell Grunt to kick off the PhantomCSS desktop task by running the following in the project directory:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grunt phantomcss:desktop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Boop.&lt;/p&gt;

&lt;p&gt;Boop..&lt;/p&gt;

&lt;p&gt;Beeeep...&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/cli_baseline.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Woohoo! In the above, the &lt;em&gt;#aardvark&lt;/em&gt; element has been screenshotted (still a word) and the file saved to disk as &lt;strong&gt;aardvark_0.png&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If we do as the command output suggests, and look inside the &lt;strong&gt;tests/source&lt;/strong&gt; directory, we can see that &lt;strong&gt;aardvark_0.png&lt;/strong&gt; is sitting in there, happy as can be.&lt;/p&gt;

&lt;p&gt;Let&#39;s run the Grunt command again, to see what happens:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/cli_pass.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The test passed, because there are no differences between the baseline screenshot and the newly generated result file. In fact, if we look in &lt;strong&gt;tests/results&lt;/strong&gt; now, we see an identical copy of &lt;strong&gt;aardvark_0.png&lt;/strong&gt; sitting there.&lt;/p&gt;

&lt;p&gt;If you were to run these tests over and over again, they&#39;d just keep passing. So let&#39;s mix things up a bit and make a change to the styling of the test subject:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nf&quot;&gt;#aardvark&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If we reload the test subject page in a browser, we can see that the div is now wider than before.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/browser_postchange.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let&#39;s see if the automated testing picks up this relatively subtle difference. Once more unto Grunt, my friend, once more:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/cli_fail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Hoopla, the test has failed! (not something you&#39;ll hear said too often). PhantomCSS was lovely, and notified us where and why it has failed. In fact, let&#39;s go have a look inside the &lt;strong&gt;tests/results&lt;/strong&gt; folder again. There we can see the diff file that was generated by the failure:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/visual-regression-testing/aardvark_0.fail.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As before, the pink is the diff between the baseline and the latest test run.&lt;/p&gt;

&lt;p&gt;A completely automated test of a visual regression. Not bad!&lt;/p&gt;

&lt;h2&gt;Advanced usage - integrating into a workflow&lt;/h2&gt;

&lt;p&gt;So how do we make use this amazing testing skill that we&#39;ve just acquired?&lt;/p&gt;

&lt;p&gt;Well, if we were to try to get PhantomCSS to screenshot an entire webpage and test it later on, we wouldn&#39;t get very far. A live page, hell, even a development page, is far too volatile for visual testing. Content changes, third-party widgets and whizzy animated elements all cause constant change. Because of all this the second screenshot of a live page will be different from the first screenshot, and so PhantomCSS will signal a fail, even if there isn&#39;t anything that we&#39;d think of as a regression.&lt;/p&gt;

&lt;h3&gt;Building a component library&lt;/h3&gt;

&lt;blockquote&gt;&lt;p&gt;&quot;Screenshot based regression testing can only work when UI is predictable.&quot;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- PhantomCSS documentation&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;

&lt;p&gt;If we can&#39;t test entire pages of a site, then what &lt;em&gt;can&lt;/em&gt; we test? To answer that we have to talk about Atomic Components.&lt;/p&gt;

&lt;p&gt;Not to be confused with &lt;a href=&quot;http://webcomponents.org/&quot;&gt;Web Components&lt;/a&gt;, &lt;a href=&quot;http://bradfrostweb.com/blog/post/atomic-web-design/&quot;&gt;Atomic Components Components&lt;/a&gt; are small, single-purpose, reusable chunks of HTML and CSS that can be used over and over again to present a consistent UI element. No matter where it&#39;s placed in a page, the component will look and work the same. Importantly, it&#39;s self-contained - its CSS effects only itself, and it exists independently of everything else.&lt;/p&gt;

&lt;p&gt;It&#39;s gathering examples of these atomic components into a single area that enables us to use Visual Regression Testing effectively. Each component can be fleshed out with fixed content, thereby giving us a static baseline to work against. We can take a screenshot of each component and, because we control it, be sure that it will remain as it is.&lt;/p&gt;

&lt;h3&gt;Style Guide vs Component Library&lt;/h3&gt;

&lt;p&gt;We should perhaps differentiate between what I&#39;m calling a component library, and the common term, Style Guide (a wonderful example of which is the one for &lt;a href=&quot;http://govuk-elements.herokuapp.com/&quot;&gt;GOV.UK&lt;/a&gt;). While there&#39;s a good deal of overlap between a component library and a style guide, I consider them to be separate entities.&lt;/p&gt;

&lt;p&gt;Some big differentiating factors are:&lt;/p&gt;

&lt;h4&gt;A component library&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Shows &lt;em&gt;how&lt;/em&gt; to build a component.&lt;/li&gt;
&lt;li&gt;Is primarily a &lt;strong&gt;technical&lt;/strong&gt; resource.&lt;/li&gt;
&lt;li&gt;Can be considered as an internal resource, as it&#39;s for the benefit of developers building a site.&lt;/li&gt;
&lt;li&gt;Is part of the site documentation.&lt;/li&gt;
&lt;li&gt;Shows all the variations of each component&lt;/li&gt;
&lt;li&gt;And, of course, is there for testing&lt;/li&gt;
&lt;/ul&gt;

&lt;h4&gt;A style guide&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Shows &lt;em&gt;when&lt;/em&gt; to use a component.&lt;/li&gt;
&lt;li&gt;Is a &lt;strong&gt;non-technical&lt;/strong&gt; resource.&lt;/li&gt;
&lt;li&gt;Is not only for developers, but also aimed at, and hopefully built by, UX experts, designers and marketing personnel, all working together.&lt;/li&gt;
&lt;li&gt;Is built from components, and this depends upon the component library.&lt;/li&gt;
&lt;li&gt;Shows how components are used in context.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Using a component library for testing&lt;/h3&gt;

&lt;p&gt;I&#39;ve found that building component libraries with a static site generator like &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is by far the easiest way of doing things. But whatever you use, however you build it, just make sure that the outputted code is &lt;em&gt;stable&lt;/em&gt;. It shouldn&#39;t change unless &lt;em&gt;you&lt;/em&gt; change it.&lt;/p&gt;

&lt;p&gt;To get going, start bringing together definitive examples of all of your components onto one page.&lt;/p&gt;

&lt;p&gt;Examples of each component should be isolated, and wrapped in their own unique selector. I use the following format:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testsubject-COMPONENTNAMEHERE&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testsubject&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
   ... component lives here ...
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Whatever you end up using, keep it consistent and obvious. You should be able to guess what a component name will be when you come to reference it later.&lt;/p&gt;

&lt;h4&gt;Git versioning&lt;/h4&gt;

&lt;p&gt;To make the these tests truly effective for all members of your team, you will need add the component examples, the tests you&#39;ve written and the baseline screenshots to your repo.&lt;/p&gt;

&lt;p&gt;Try &lt;strong&gt;not&lt;/strong&gt; to store your results and diff images in the repo. Whatever directory you keep those in, make sure that add it to your .gitignore file. They get created and destroy during your tests, so adding them to the repo will only create confusion.&lt;/p&gt;

&lt;p&gt;To update a test or a component, you will need to delete the associated baseline file and rerun PhantomCSS. When PhantomCSS sees that there is no baseline file, it will treat this as a first run, and generate a brand spanking new one. Once that new baseline is generated, it can be added to the repo.&lt;/p&gt;

&lt;h4&gt;Extending the library&lt;/h4&gt;

&lt;p&gt;We could get clever and in our test script start looping over every incidence of &quot;.testsubject&quot;. There&#39;s a snag waiting for us if we do that. Remember the &quot;_0&quot; that got appended to the end of the baseline file in our previous demo? It&#39;s incremented every time a new test is added. PhantomCSS names files in this way so that a unique filename is generated every time. Two tests, both with the same title, won&#39;t overwrite each other.&lt;/p&gt;

&lt;p&gt;Say we have the following tests:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aardvark&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-aardvark&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bison&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-bison&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;capybara&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-bison&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;donkey&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-donkey&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These would generate the following baseline files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;aardvark_0.png&lt;/li&gt;
&lt;li&gt;bison_1.png&lt;/li&gt;
&lt;li&gt;capybara_2.png&lt;/li&gt;
&lt;li&gt;donkey_3.png&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But if we now try altering the order of our tests, swapping Aardvark to the end:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;bison&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-bison&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;capybara&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-bison&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;donkey&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-donkey&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;casper&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;aardvark&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;#testsubject-aardvark&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;phantomcss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;screenshot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;testsubject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;then we get the following outputted:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bison_0.png&lt;/li&gt;
&lt;li&gt;capybara_1.png&lt;/li&gt;
&lt;li&gt;donkey_2.png&lt;/li&gt;
&lt;li&gt;aardvark_3.png&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This effectively produces new baseline files for not only Aardvark, but every other test in the series. Yuck. Having the baseline files regenerated isn&#39;t a total disaster, but it produces a lot of noise for your process and is going to clutter up your Git commits. For the sake of consistency best practise should be for new tests to only be added at the end of the PhantomCSS file, and to avoid reordering tests, unless you &lt;em&gt;really&lt;/em&gt; have to.&lt;/p&gt;

&lt;h2&gt;Limitations of Visual Regression Testing&lt;/h2&gt;

&lt;p&gt;This isn&#39;t a panacea for all your testing problems. I think that it only becomes useful at scale, and still used alongside functional tests fro your interfaces, and unit tests for your frontend application code.&lt;/p&gt;

&lt;p&gt;Critically, PhantomCSS only runs on Webkit, so this won&#39;t check for browser variations. In fact, someone could cause a Firefox-only regression and this technique wouldn&#39;t pick it up. As a workaround, perhaps this could be combined with a third-party testing service, such as &lt;a href=&quot;http://www.browserstack.com/&quot;&gt;Browserstack&lt;/a&gt;, so that it could collect component screenshots from across a variety of devices, and we could use those for baselines and testing. If anyone knows how to grab component-level screenshots from such a service, and not just page-level ones, &lt;a href=&quot;https://twitter.com/sonniesedge&quot;&gt;let me know on Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;The future&lt;/h2&gt;

&lt;p&gt;So far I&#39;ve only used this for local developer testing in a team. Developers write their code in a feature branch and, before they merge it in to the central tree, they run the PhantomCSS tests on it. It&#39;s a confidence raising tool.&lt;/p&gt;

&lt;p&gt;The real aim is to get this hooked into a continuous integration cycle, so that code is not accepted if it causes a regression in visuals.&lt;/p&gt;

&lt;p&gt;Perhaps a more formal system could be developed around these techniques. Component Driven Development could be a possibility. Components are designed initially in a graphics program, with input from all teams. These graphics are used as baseline screenshots which Frontend coders could then write code against until it matches the screenshots and the related tests pass.&lt;/p&gt;

&lt;p&gt;Personally, I wouldn&#39;t be a fan of this approach. I&#39;m sold on designing rapidly in the browser. But it might work for more formal team workflows.&lt;/p&gt;

&lt;p&gt;However it develops, I suspect that CSS testing is about to become big.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[UPDATE:]&lt;/strong&gt; Just as I was about to publish this, I heard about &lt;a href=&quot;http://webuild.envato.com/blog/styleguide-driven-development/&quot;&gt;Styleguide Driven Development&lt;/a&gt;. I think there&#39;s a large overlap between these methodologies, and it would be great to start using the techniques outlined there to start reliably automating the production of static components.&lt;/p&gt;

&lt;h2&gt;References&lt;/h2&gt;

&lt;h3&gt;Articles&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.lullabot.com/blog/article/css-regression-testing-resemblejs/&quot;&gt;https://www.lullabot.com/blog/article/css-regression-testing-resemblejs/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2013/06/11/front-end-ops/&quot;&gt;http://www.smashingmagazine.com/2013/06/11/front-end-ops/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.smashingmagazine.com/2012/10/23/road-reusable-html-components/&quot;&gt;http://www.smashingmagazine.com/2012/10/23/road-reusable-html-components/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://govuk-elements.herokuapp.com/&quot;&gt;http://govuk-elements.herokuapp.com/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://webuild.envato.com/blog/styleguide-driven-development/&quot;&gt;http://webuild.envato.com/blog/styleguide-driven-development/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Tools&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://huddle.github.io/Resemble.js&quot;&gt;http://huddle.github.io/Resemble.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://phantomjs.org&quot;&gt;http://phantomjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://casperjs.org&quot;&gt;http://casperjs.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Huddle/PhantomCSS&quot;&gt;https://github.com/Huddle/PhantomCSS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/chrisgladd/grunt-phantomcss&quot;&gt;https://github.com/chrisgladd/grunt-phantomcss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jekyllrb.com&quot;&gt;http://jekyllrb.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://csste.st&quot;&gt;http://csste.st&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 17 Oct 2014 13:00:16 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/visual-regression-testing</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/visual-regression-testing</guid>
        
        
        <category>testing</category>
        
        <category>atomicdesign</category>
        
      </item>
    
      <item>
        <title>Using libsass</title>
        <description>&lt;h2 id=&quot;why-use-libsass&quot;&gt;Why use libsass?&lt;/h2&gt;
&lt;p&gt;The standard version of Sass is written in Ruby by &lt;a href=&quot;http://www.hamptoncatlin.com/&quot;&gt;Hampton Catlin&lt;/a&gt;, &lt;a href=&quot;http://nex-3.com/&quot;&gt;Natalie Weizenbaum&lt;/a&gt; and &lt;a href=&quot;http://chriseppstein.github.io/&quot;&gt;Chris Eppstein&lt;/a&gt;. It’s fantastic - constantly adding new features whilst maintaining stability for existing ones.&lt;/p&gt;

&lt;p&gt;However, it’s a Ruby application. Which means that it can be slow. Very, very slow.&lt;/p&gt;

&lt;p&gt;You might not notice it if you’re just playing with Sass, but you’ll certainly notice it on larger jobs, pulling in multiple Sass files and partials. On a recent project, Sass files were taking around 8 seconds to compile. If you’re using a typical frontend workflow, Sass will be compiling every time you save the file. We were actually hitting scenarios where a developer would write some new code and hit save before the previous chunk of code had even finished being generated.&lt;/p&gt;

&lt;p&gt;With libsass the compile time problem just goes away. Compile times on that enormous project went from 8 seconds to 800ms. Yowzer.&lt;/p&gt;

&lt;p&gt;On this site, the one you’re reading right now, the Sass builds so quickly that I can’t measure it.&lt;/p&gt;

&lt;h2 id=&quot;installation--workflow&quot;&gt;Installation &amp;amp; Workflow&lt;/h2&gt;

&lt;p&gt;I’m using &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt; on OSX for this:&lt;/p&gt;

&lt;p&gt;Install the core libsass library from Homebrew. Unfortunately, the version of libsass provided by Homebrew is v1.0.1 - workable, but very, very old. If you want to use that version just:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew install libsass
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, if you want to use the latest, greatest, cutting-edge code, then use the following to install the &lt;a href=&quot;https://github.com/benschwarz/homebrew-sassc&quot;&gt;HEAD versions of the SassC and libsass libraries&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew tap benschwarz/homebrew-sassc
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;brew install benschwarz/sassc/sassc --HEAD
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now, libsass by itself isn’t very useful. What’s needed is an implementation that you can make use of. For that I’m using &lt;a href=&quot;https://github.com/sass/node-sass&quot;&gt;node-sass&lt;/a&gt;, an npm library that allows node.js to interface with the libsass library.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install --save-dev node-sass
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Again, if you’re not writing node.js applications yourself, this isn’t much use. What you need to is install grunt-sass.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;npm install --save-dev node-sass
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This allows you to call libsass from Grunt directly. I use the following for this site:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// SASS&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Compile Sass files (in .scss format) into CSS files&lt;/span&gt;
&lt;span class=&quot;nl&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;develop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nl&quot;&gt;sourceMap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;%= globalConfig.dev %&amp;gt;/theme/css/main.css&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;%= globalConfig.dev %&amp;gt;/theme/stylesheets/main.scss&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;production&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;%= globalConfig.prod %&amp;gt;/theme/css/main.css&#39;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;&amp;lt;%= globalConfig.prod %&amp;gt;/theme/stylesheets/main.scss&#39;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;downsides&quot;&gt;Downsides&lt;/h2&gt;

&lt;p&gt;Libsass is kinda behind the Ruby version in feature implementation. While Sass 3.4 (Selective Steve) is out and being used, with the devs adding new features ready for 4.0, libsass 2.0 is still catching up with some of Sass’s 3.3 features.&lt;/p&gt;

&lt;p&gt;There are some documented problems with Sass @extends and Sass list maps, both of which have been &lt;a href=&quot;http://benfrain.com/libsass-lightning-fast-sass-compiler-ready-prime-time/&quot;&gt;documented&lt;/a&gt; superbly by &lt;a href=&quot;http://benfrain.com/&quot;&gt;Ben Frain&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Good news is on the horizon though, as it was announced at NY’s SassConf that libsass 3.0 is going to have these features &lt;a href=&quot;https://github.com/sass/libsass/releases/tag/3.0rc2&quot;&gt;baked in&lt;/a&gt;. 3.0 is in RC right now, so the stable version should be out very soon. If you used the cutting edge code from above, you could even be using it right now. We’ll just all have to wait for the official libsass build to use 3.0.&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Sep 2014 13:00:16 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/using-libsass-library</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/using-libsass-library</guid>
        
        
        <category>sass</category>
        
        <category>libsass</category>
        
      </item>
    
  </channel>
</rss>
