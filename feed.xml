<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sonniesedge</title>
    <description>The personal site of sonniesedge. Human, web developer, ex-redhead. 
</description>
    <link>http://sonniesedge.co.uk/</link>
    <atom:link href="http://sonniesedge.co.uk/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 Oct 2016 16:02:20 +0200</pubDate>
    <lastBuildDate>Sun, 09 Oct 2016 16:02:20 +0200</lastBuildDate>
    <generator>Jekyll v3.0.3</generator>
    
      <item>
        <title>Setting the scope for Loom</title>
        <description>&lt;p&gt;&lt;em&gt;Writing the core of &lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt; has been extraordinary fun, and I’ll be sharing some of the thought processes and techniques behind it with you.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;So what did I want from a new framework?&lt;/p&gt;

&lt;p&gt;I didn’t want make it &lt;em&gt;too&lt;/em&gt; broad. I know I want the user to do anything with it, but you could go too far with that, you know? I mean, the ultimate do-anything-you-want Sass/CSS framework is a bunch of mixins that can be used to write your own code. (Hell, the &lt;em&gt;ultimate&lt;/em&gt; framework is blank text-file). Multi-contributor, sponsored projects like &lt;a href=&quot;https://github.com/thoughtbot/bourbon/&quot;&gt;Bourbon&lt;/a&gt; are already out there and do things 1000x better than a single developer ever could.&lt;/p&gt;

&lt;p&gt;On the other hand, things like &lt;a href=&quot;http://purecss.io/&quot;&gt;Pure&lt;/a&gt; are just too restrictive. You just want me to include a CSS file and use your classes? Nah, mate.&lt;/p&gt;

&lt;p&gt;No, I had to think about what &lt;em&gt;I’d&lt;/em&gt; like to see from a CSS framework, and go from there. That’s the reason most open-source projects get started, no?&lt;/p&gt;

&lt;h1 id=&quot;put-your-thoughts-down-in-writing&quot;&gt;Put your thoughts down in writing&lt;/h1&gt;
&lt;p&gt;I had all these ideas buzzing around my head for Loom, but nothing concrete or any stated goals, so I sat down and came up with the following manifesto points:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It should make things &lt;em&gt;easier&lt;/em&gt; for a developer like me. So, if I were to end up configuring a framework more than using it, it’s pointless. If each time I use it I ended up overriding the classes with my own, it’s not fulfilling it’s job.&lt;/li&gt;
  &lt;li&gt;This isn’t about themes. I’m not aiming to recreate Foundation or Bootstrap here. I want a framework that could be used to &lt;em&gt;produce&lt;/em&gt; a CSS library like Bootstrap.&lt;/li&gt;
  &lt;li&gt;Following from the previous point, this should be aimed at people like me, professional frontenders. This isn’t something to be be picked up and dropped into a project to make it look pretty. This is something to help professional designer/developers in their everyday tasks.&lt;/li&gt;
  &lt;li&gt;I love design systems, and I want something that ties in with that. I want to be able to write code that lends itself to pattern libraries and styleguides. You know, that whole idea of producing &lt;a href=&quot;http://daverupert.com/2013/04/responsive-deliverables/&quot;&gt;a mini-Bootstrap for each client&lt;/a&gt;, as Dave Rupert talks about. So this framework needs some way of easily accessing design system settings, such as spacings, colour palettes, typography, etc.&lt;/li&gt;
  &lt;li&gt;I wanted to be write CSS in the way that I want to write it. This doesn’t just mean naming conventions, but the way that CSS classes are used. Which end of the Atomic vs Component spectrum do I want to swing to? Do I have to make that choice?&lt;/li&gt;
  &lt;li&gt;Modularity. The problem with many CSS libraries is that they get imported all in one go and don’t offer any selectivity. You end up having to overwrite their CSS classes with your own.&lt;/li&gt;
  &lt;li&gt;Enforce some best practice with regard to specificity. One of the few things I really don’t like to see in CSS is overly-nested selectors and the emergence of specificity wars - it’s the bane of most projects I’ve come into. Whatever system I came up with should help avoid that.&lt;/li&gt;
  &lt;li&gt;Recognise that most developers don’t stick rigidly to any particular methodology. Most people end up with a hybrid of many approaches, something that works for them. Any framework should have flexibility for that.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;thinking-technically&quot;&gt;Thinking technically&lt;/h1&gt;
&lt;p&gt;After looking at these manifesto points it became so much easier to decide on the technical architecture of things.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I didn’t want to offer something themed. There’s a multitude of &lt;strike&gt;Wordpress themes&lt;/strike&gt; pattern libraries already out there that do that. I wanted a loose collection of objects and utilities to help others build a pattern library.&lt;/li&gt;
  &lt;li&gt;I definitely wanted to use ITCSS, right from the start. It allows enormous flexibility for structuring code while avoiding specificity wars. It’s not documented very well, but I could address that in the framework documentation.&lt;/li&gt;
  &lt;li&gt;I wanted to let the consumer decide if they want to output chunky components or lighter utility classes. I can’t say I prefer using utility classes, but I can utterly see the value.&lt;/li&gt;
  &lt;li&gt;I wanted to use BEM of for naming. But I was still unsure at this initial point about if I wanted to force this on end users.&lt;/li&gt;
  &lt;li&gt;I wanted to make sure everything would be modular. I think this came naturally from wanting to use ITCSS - it’s designed to allow the insertion or modification of modules and layers, and is what drew me to it initially.&lt;/li&gt;
  &lt;li&gt;I wanted it to be documented. There’s nothing more frustrating than a framework that you don’t have full information for. I’d always wanted to use SassDocs so I went for that.&lt;/li&gt;
  &lt;li&gt;Because of my design system love, I wanted to get that incorporated from the start. That meant everything should be standardised into Sass variables where possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;so-what-next&quot;&gt;So what next?&lt;/h1&gt;

&lt;p&gt;That set the scope for what I wanted to achieve, but comes after that? Check back soon for the next part, “Organizing the Code”.&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Oct 2016 15:30:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/loom-setting-the-scope</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/loom-setting-the-scope</guid>
        
        
      </item>
    
      <item>
        <title>Introducing Loom</title>
        <description>&lt;p&gt;So, I thought it’d be a great idea to write my own CSS framework. This is the kind of thinking that occurs when I’ve had too much caffeine (file this alongside my other caffeine-based projects, such as “Why not repaint the apartment?” and “Try abseiling down an industrial chimney”).&lt;/p&gt;

&lt;p&gt;I was inspired by writing an in-house framework for a previous client. It was eventually used on several major projects, but was relatively inflexible, written as it was for one use-case and for a certain way of writing code.&lt;/p&gt;

&lt;p&gt;“So,” I thought to myself, “what if I were to write my own, something that could output any type of CSS code, in whatever way the user wanted to use it?”&lt;/p&gt;

&lt;p&gt;Think large, and swing hard, you know?&lt;/p&gt;

&lt;h1 id=&quot;introducing-loom&quot;&gt;Introducing Loom&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt; is a Sass framework for producing your own pattern libraries. It’s still in alpha, but already it provides a series of OOCSS bricks, mixins, functions and classes that allow you to quickly put together a pattern library of your own, ready to use on a real website. Aimed at professional web developers, it aims to make your life &lt;em&gt;easier&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It’s designed to be light, flexible, modular and just enough opinions to ensure that it runs smoothly.&lt;/p&gt;

&lt;h1 id=&quot;why-build-something-else&quot;&gt;Why build something else?&lt;/h1&gt;

&lt;p&gt;Oh, it was partly for the fun, but mainly because I wanted to produce something that was actually &lt;em&gt;useful&lt;/em&gt;. Loom doesn’t try to give you pre-made and pre-themed CSS that can be dropped onto a site, the way Zurb Foundation or Twitter Bootstrap libraries do. It gives you a toolkit, a way of making your own pattern libraries. A way to weave your own patterns. Yeah, clever.&lt;/p&gt;

&lt;h1 id=&quot;architecture&quot;&gt;Architecture&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt; is written in Sass and is based upon the ITCSS layered architecture. It uses BEM for its (optional) object and utility classes. It’s deliberately written in a way that discourages Sass nesting and avoids CSS specificity battles, by returning to source order as the way of describing specificity. This makes it perfect for use in multi-developer teams where the threat of “just add a multi-level selector to the end of the stylesheet to make it work” is ever present.&lt;/p&gt;

&lt;h1 id=&quot;why-use-it&quot;&gt;Why use it?&lt;/h1&gt;

&lt;p&gt;Dave Rupert nailed it when he said client work was about “&lt;a href=&quot;http://daverupert.com/2013/04/responsive-deliverables/&quot;&gt;producing a series of mini-Bootstraps&lt;/a&gt;”. As developer-designers, we should be delivering complete pattern-libraries that describe how a clients site can be used, and which can be used to grow the site styles, get a visually overview and to attach testing.&lt;/p&gt;

&lt;p&gt;Loom is grounded in &lt;a href=&quot;http://atomicdesign.bradfrost.com/chapter-1/&quot;&gt;Design System thinking&lt;/a&gt; and is aimed at helping you to create your own &lt;a href=&quot;http://alistapart.com/blog/post/getting-started-with-pattern-libraries&quot;&gt;pattern libraries&lt;/a&gt;. This is vital when you’re working on multi-page, multi-author sites, where you don’t get to craft each page artisanally yourself, but instead rely on authors and CMSs to generate a page.&lt;/p&gt;

&lt;p&gt;The framework knows about design systems, and so comes pre-equpped with variables, mixins and functions that can be used to extract standard thematic elements for your site. Annoyed by developers using &lt;code class=&quot;highlighter-rouge&quot;&gt;color: #52BE80&lt;/code&gt; in the middle of a class? Well now you can encourage them to use &lt;code class=&quot;highlighter-rouge&quot;&gt;color: get-color(brand-green)&lt;/code&gt; instead, and keep things clean.&lt;/p&gt;

&lt;h1 id=&quot;how-do-you-use-it&quot;&gt;How do you use it?&lt;/h1&gt;
&lt;p&gt;There’s two ways of using &lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;Loom&lt;/a&gt;. You can use the (entirely optional) Object and Utility classes to quickly scaffold out a site.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o-container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;o-h-alpha u-margin-none&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Good morning humans of Earth&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;u-color-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;We find you disturbing&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Or you can use the mixins provided to create your own atomic components and apply them to your HTML. Perfect for creating robust and lasting pattern libraries!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.c-header&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.c-title&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;heading&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;@include&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;margin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nc&quot;&gt;.c-meta&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;header&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-header&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-title&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Good morning humans of Earth&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;h2&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;c-meta&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;We find you disturbing&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/header&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Note that Objects are added to Components via &lt;code class=&quot;highlighter-rouge&quot;&gt;@include&lt;/code&gt;, rather than &lt;code class=&quot;highlighter-rouge&quot;&gt;@extend&lt;/code&gt;. This is a conscious choice. &lt;code class=&quot;highlighter-rouge&quot;&gt;@extend&lt;/code&gt; is extremely unpredictable with how it can affect source order, and would undermine the functionality of Loom. &lt;code class=&quot;highlighter-rouge&quot;&gt;@include&lt;/code&gt; introduces a lot of repetition, but this is eliminated when the final CSS is used on a page, as gzip will compress repeated lines of text to nothing.&lt;/p&gt;

&lt;h1 id=&quot;encouraging-a-common-way-of-working&quot;&gt;Encouraging a common way of working&lt;/h1&gt;

&lt;p&gt;Loom aims to help your team work together. It’s designed to be used with style linting systems, and to be consumed by automated styleguide generators and regression testing systems.&lt;/p&gt;

&lt;p&gt;When you tie in a stylelinting system like &lt;a href=&quot;https://github.com/stylelint/stylelint&quot;&gt;stylelint&lt;/a&gt; and &lt;a href=&quot;https://github.com/postcss/postcss-bem-linter&quot;&gt;BEM Linter&lt;/a&gt; you have an extremely robust system that should catch any code that strays from your house style.&lt;/p&gt;

&lt;p&gt;The outputted visual components are perfect for integrating with pattern library documentation systems, such as &lt;a href=&quot;http://patternlab.io/&quot;&gt;PatternLab&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;fully-documented&quot;&gt;Fully documented&lt;/h1&gt;

&lt;p&gt;Loom is fully documented, using &lt;a href=&quot;http://sassdoc.com/&quot;&gt;SassDoc&lt;/a&gt;. You can look through the included documentation to see what variables, functions and mixins are available out of the box.&lt;/p&gt;

&lt;h1 id=&quot;take-a-look&quot;&gt;Take a look&lt;/h1&gt;
&lt;p&gt;You can &lt;a href=&quot;https://github.com/sonniesedge/loom&quot;&gt;find Loom on Github&lt;/a&gt;. Please feel free to take a look and start trying it out. I’m really happy to hear suggestions and ideas!&lt;/p&gt;
</description>
        <pubDate>Mon, 03 Oct 2016 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/introducing-loom-a-new-framework</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/introducing-loom-a-new-framework</guid>
        
        
      </item>
    
      <item>
        <title>Deploying a compiled site to a personal Github Pages account</title>
        <description>&lt;p&gt;Having recently switched to using &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; to host this site I thought I’d quickly note down how I overcame some of the limitations of the Github Pages when it comes to using modern build processes.&lt;/p&gt;

&lt;p&gt;Github Pages is a free &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll-based&lt;/a&gt; hosting service offered by Github. You can create a repository called WHATEVER.github.io and via a lot of internal magic a static website of the same name appears, built from the Jekyll project hosted there. It’s Github taking over the build process step for you.&lt;/p&gt;

&lt;p&gt;Difficulties arise when you hit some of the limits imposed by Github Pages on the way Jekyll can be used. For security reasons Github &lt;a href=&quot;https://help.github.com/articles/adding-jekyll-plugins-to-a-github-pages-site/&quot;&gt;doesn’t allow most third-party gems to be run&lt;/a&gt; on Github Pages, nor does it allow any Gulp/Grunt/npm build scripts to be run on their servers. This is totally understandable - that kind of stuff would be a huge security nightmare.&lt;/p&gt;

&lt;p&gt;The lack of third-party gems and build scripts means that a lot of modern &lt;a href=&quot;https://css-tricks.com/gulp-for-beginners/&quot;&gt;website build techniques&lt;/a&gt; are not available to people using Github Pages. For example, there is no way to get CSS auto-prefixing to work on there, as the &lt;a href=&quot;https://github.com/ai/autoprefixer-rails&quot;&gt;Autoprefixer gem&lt;/a&gt; is not allowed, nor can you run Autoprefixer via &lt;a href=&quot;https://github.com/postcss/autoprefixer&quot;&gt;Postcss&lt;/a&gt; on their server.&lt;/p&gt;

&lt;p&gt;Okay, yeah, you could set up your site in such a way as to generate your compiled Jekyll pages and CSS into a static site, intermixed with your Jekyll code and store that on your github account. You’d also have to pull in all your npm/Bower dependencies and store them in your repo as well. A working solution, but not an elegant solution one.&lt;/p&gt;

&lt;p&gt;But there is another way. You can still use Jekyll, and your modern build process, but you &lt;em&gt;only&lt;/em&gt; publish the compiled static site to Github pages.&lt;/p&gt;

&lt;p&gt;The trick is to use two repositories, hosting your automated, advanced, super-whizzy site source on a separate repository from your WHATEVER.githubpages.io repository. You then use a script to build a static site from your source and publish the generated static site as a commit to your WHATEVER.githubpages.io repository. You then get the advantages of Jekyll as a CMS, a modern build process from Gulp/Grunt, no compiled CSS in your source repo and you get to bypass the build limitations of Github Pages.&lt;/p&gt;

&lt;p&gt;The easiest way to do this is with the &lt;a href=&quot;https://github.com/shinnn/gulp-gh-pages&quot;&gt;gulp-gh-pages&lt;/a&gt; npm package. It allows you to specify a build directory where your compiled site is built to and a repository where the site should be pushed. It will then take this compiled site, clone it to another folder, and create a commit from everything in that folder, pushing it to Github.&lt;/p&gt;

&lt;p&gt;This package can also be used on organisational and project Github pages, which allow a branch on the same repository to be used as a source for serving the site (I’m unsure why Github don’t allow this on Personal sites). In that case you specify the same repo, but use a different branch (by default it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;gh-pages&lt;/code&gt;) to serve your static site.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge-website&quot;&gt;source for this site&lt;/a&gt;, compared to the compiled code in the &lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge.github.io&quot;&gt;sonniesedge.github.io repository&lt;/a&gt; to see the difference and to note the &lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge-website/blob/master/gulpfile.js&quot;&gt;build/deploy script&lt;/a&gt; used to produce one from the other.&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Sep 2016 19:57:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/deploying-a-compiled-site-to-github-pages</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/deploying-a-compiled-site-to-github-pages</guid>
        
        
      </item>
    
      <item>
        <title>Twitter image accessibility</title>
        <description>&lt;p&gt;&lt;em&gt;UPDATE: March 29 2016. &lt;a href=&quot;https://blog.twitter.com/2016/accessible-images-for-everyone&quot;&gt;Twitter have announced&lt;/a&gt; that they will support a limited amount of alt text on images posted to twitter. Unfortunately they will not be enforcing alt text or using AI to determine what is in an image.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I just switched to using a command-line Twitter client and I was again reminded about how limiting it is to use Twitter when you cannot see the images contained in a tweet.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/twitter-accessibility/twitter_pixelated.png&quot; alt=&quot;Screenshot of my twitter client, Rainbowstream&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;http://www.rainbowstream.org/&quot;&gt;RainbowStream&lt;/a&gt;, tweets with images show up heavily pixellated. Obviously this is a limitation of being a skinny-jeaned hipster and using a command-line client.&lt;/p&gt;

&lt;p&gt;But what about if you don’t have a choice of how you see Twitter? What if your eyesight is impaired in some way? Even if you’re working around this with large text, or a screen-reader, there’s still a good chance that an image would be unviewable.&lt;/p&gt;

&lt;p&gt;This isn’t too much of a problem if people are posting images as accessories to their tweets. But if they’re screencapping chunks of texts, from books, sites or other tweeted conversations, &lt;em&gt;and not linking back to the originals&lt;/em&gt; then that suddenly becomes a very alienating experience for you.&lt;/p&gt;

&lt;p&gt;To help people understand, I’ve quickly scribbled a bookmarklet that makes images inaccessible to fully-sighted users. Just drag the following to your browser bookmark menu and click it when on twitter dot com.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;javascript:(function(){javascript:(function(){var newcss=&#39;.cards-media-container img {-webkit-filter: blur(10px); filter: blur(10px);}&#39;;if(&amp;quot;\v&amp;quot;==&amp;quot;v&amp;quot;){document.createStyleSheet().cssText=newcss}else{var tag=document.createElement(&amp;quot;style&amp;quot;);tag.type=&amp;quot;text/css&amp;quot;;document.getElementsByTagName(&amp;quot;head&amp;quot;)[0].appendChild(tag);tag[(typeof document.body.style.WebkitAppearance==&amp;quot;string&amp;quot;)?&amp;quot;innerText&amp;quot;:&amp;quot;innerHTML&amp;quot;]=newcss}})();})();&quot; style=&quot;padding: 1em; background-color: lightgray; margin-top: 1em; margin-bottom: 1em; display: inline-block;&quot;&gt;Twitter blurred images&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Your images should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/twitter-accessibility/twitter_blurred.png&quot; alt=&quot;A blurred image from twitter.com&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Try and use it regularly and remind yourself about how tweets and images work when your ability to see images is limited.&lt;/p&gt;

&lt;p&gt;I know Twitter itself is rubbish and halts attempts at accessibility. It’s criminal that it doesn’t provide a way to provide alt text and vexing that there’s no way to embed chunks of text. But until we build up a broad-conciousness of how inaccessible it is and for us all to begin to pressure it, nothing will change.&lt;/p&gt;

&lt;h2 id=&quot;top-tips&quot;&gt;Top tips&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;You can still use images, even for screencaps - just &lt;em&gt;provide an alternative&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;If you’re posting images of text, then also put a copy on a Github Gist: https://gist.githubusercontent.com/SonniesEdge/6c0edb64969f94c4bf0c/raw&lt;/li&gt;
  &lt;li&gt;If you’re linking to a series of tweets, then also Storify them and link to that.&lt;/li&gt;
  &lt;li&gt;If you’re posting a photo, try and describe it in the text, or make your tweet work &lt;em&gt;without&lt;/em&gt; having to see the image.&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 13:00:16 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/twitter-image-accessibility</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/twitter-image-accessibility</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Ich bin ein Berliner</title>
        <description>&lt;p&gt;Three years ago, when I first met my partner, I knew that she wanted to move to Berlin. I didn’t think anything of it back then, as I was in the first lovely flushes of a relationship, was still in a whirlwind of discovering my new home of London, and didn’t know what the future might hold in the next week, let alone years in the future.&lt;/p&gt;

&lt;p&gt;To be frank, I never thought it would actually happen. But here I am now, with the same wonderful woman, packing up the last of our belongings as we prepare to move across Europe to another city.&lt;/p&gt;

&lt;p&gt;So why am I doing it? Well, love for one thing. I’ve seen enough bad things in my life to know that a true loving relationship is a precious thing, and that you’ll do anything to be with that person. If my partner said she wanted to move to Tasmania, I’d be clamping down on the spider fears and buying a cork hat. If she said she wanted to go to Greenland, I’d be taking snowmobile lessons and learning Kalaallisut.&lt;/p&gt;

&lt;p&gt;Happily however, we both want to move to Berlin and in reality our relationship isn’t as unbalanced that either of us would drag the other to somewhere they might hate. If I didn’t want to move there, we’d both find a compromise and do something else.&lt;/p&gt;

&lt;p&gt;But visiting Berlin during &lt;a href=&quot;http://2014.cssconf.eu&quot;&gt;CSSconf.eu 2014&lt;/a&gt; gave me my own reason to move. I found myself in a beautiful, weird, dirty, relaxed, sexy city. It’s got a quiet confidence that I’ve never experienced before, a centeredness that lets it and its population do whatever they want, with no care of what anybody else thinks.&lt;/p&gt;

&lt;p&gt;It’s the polar opposite of London. It’s an unpleasant truth that perhaps this move isn’t just about going somewhere, but perhaps more about where we are leaving. London has been good to me these last few years. There’s lots of jobs here in my area of work, and its filled with interesting things to do, but it’s a hard place to &lt;em&gt;live&lt;/em&gt;. The competition for housing means that &lt;a href=&quot;http://www.theguardian.com/money/2014/jan/27/renting-london-costs-twice-elsewhere&quot;&gt;rental prices are through the roof&lt;/a&gt;, cycling here &lt;a href=&quot;http://en.wikipedia.org/wiki/Cycling_in_London#2013_deaths&quot;&gt;is mortally dangerous&lt;/a&gt;, people are more concerned about their Twitter profiles than making friends and beer costs £5/€7 a pint. Add to that a resurgent Conservative government, increasing xenophobia and that particularly British obsession with owning property, &lt;a href=&quot;http://www.huffingtonpost.co.uk/2015/05/01/london-house-prices_n_7187450.html&quot;&gt;despite most London properties being unaffordable&lt;/a&gt;, and you have a place that suddenly feels very alien and very unpleasant.&lt;/p&gt;

&lt;p&gt;This all makes me more angry than sad, as I could spend a lifetime exploring London; I have friends here; and I resent being forced out of a place that has become home. But I need to leave. This place doesn’t feel like home any longer, but more like somewhere to survive.&lt;/p&gt;

&lt;p&gt;Luckily I’m privileged enough that I’ve already signed for a new job in Berlin. Once I’ve finished my contract at the BBC I’ll be moving over to &lt;a href=&quot;http://bitcrowd.net&quot;&gt;Bitcrowd&lt;/a&gt;, a small software agency in Kreuzberg. I’ve visited them and they’re absolutely lovely. It’ll be a wonderful change working in a large, airy and light office - a far cry from the current cramped noisy conditions that London seems to encourage.&lt;/p&gt;

&lt;p&gt;I’m also lucky that most young Berliners speak my native language, so I’ll be able to learn German while still being able to temporarily communicate in English.&lt;/p&gt;

&lt;p&gt;Am I going to stay in Berlin permanently? Frankly, I don’t know. I’m still a EU citizen (&lt;a href=&quot;http://en.wikipedia.org/wiki/Proposed_referendum_on_United_Kingdom_membership_of_the_European_Union&quot;&gt;at least for now&lt;/a&gt;) and I’m able to live anywhere in that beautiful region. Beyond that there’s an entire planet. So who knows?&lt;/p&gt;

&lt;p&gt;Just as I didn’t know what the future would bring back in 2012, I don’t know what it will bring for me three years on from now, in 2018.&lt;/p&gt;

&lt;p&gt;But I’m excited to find out.&lt;/p&gt;

</description>
        <pubDate>Thu, 21 May 2015 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/berlin</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/berlin</guid>
        
        <category>berlin</category>
        
        <category>moving</category>
        
        
        <category>personal</category>
        
      </item>
    
      <item>
        <title>Data Visualisations</title>
        <description>&lt;p&gt;I understand the fascination with data visualisation now. This morning my colleague showed me what he was doing with some of the data we had gathered from the general election and - I can’t lie - I got a bit excited over it.&lt;/p&gt;

&lt;p&gt;As a result I’ve spent the afternoon playing with D3 and the raw data, and I’ve learned some useful things. Sadly I can’t share any code with you, as the data it relies on is owned by the BBC and I can’t republish it (by design D3 requires a publically accessible JSON file to work from). But I can share a screenshot of what I quickly made with D3 and the election data.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/data-visualisations/size-vs-turnout.png&quot; alt=&quot;Screenshot of a scatter graph representing voter turnout vs constituency population size&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s interesting to consider the adage “&lt;a href=&quot;https://twitter.com/EmmaKennedy/status/596478834788044802&quot;&gt;Tories always vote&lt;/a&gt;” when looking at this scatter graph. It certainly shows that voter turnout was higher in constituencies where Tories won.&lt;/p&gt;
</description>
        <pubDate>Tue, 19 May 2015 14:00:00 +0200</pubDate>
        <link>http://sonniesedge.co.uk/blog/data-visualisations</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/data-visualisations</guid>
        
        <category>d3</category>
        
        
        <category>web</category>
        
      </item>
    
      <item>
        <title>Food at tech events</title>
        <description>&lt;p&gt;You’ve never noticed the food at tech events.&lt;/p&gt;

&lt;p&gt;No seriously, you haven’t. Not unless you’ve got some kind of dietary restriction.&lt;/p&gt;

&lt;p&gt;It’s always pizza that’s served. Always.* It’s really frustrating to see pizza lying around everywhere, and knowing that as one of those special-snowflake coeliacs, you can’t eat any of it. (As I type this, my stomach is growling as the smell of hot pizza wafts under my nostrils).&lt;/p&gt;

&lt;p&gt;At least there’s normally vegetarian stuff around. Even if it’s only margherita, in case vegetables scare the carnivores.&lt;/p&gt;

&lt;p&gt;I’m not asking for a 100% wheat-free, vegetarian, vegan, halal and fruitarian smorgasbord. But how about trying something different? Tacos, or sushi maybe?&lt;/p&gt;

&lt;p&gt;* Actually, I lie - &lt;a href=&quot;https://twitter.com/ldn_sass&quot;&gt;LDN Sass&lt;/a&gt; did provide mexican food.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Dec 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/food-tech-events</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/food-tech-events</guid>
        
        
        <category>food</category>
        
      </item>
    
      <item>
        <title>Writing for sitepoint is a thing that I do now</title>
        <description>&lt;p&gt;In a big move for me, I’ve started writing articles for &lt;a href=&quot;http://sitepoint.com&quot;&gt;Sitepoint.com&lt;/a&gt;. My first featured piece is &lt;a href=&quot;http://www.sitepoint.com/migrating-team-sass/&quot;&gt;Migrating a Team to Sass&lt;/a&gt;, where I talk about… migrating a team to Sass. (There are no surprises in that title).&lt;/p&gt;

&lt;p&gt;It’s really nice to see it linked up via&lt;a href=&quot;http://css-weekly.com/issue-138/&quot;&gt;CSS Weekly&lt;/a&gt;, &lt;a href=&quot;http://lullabot.com&quot;&gt;Lullabot&lt;/a&gt;’s &lt;a href=&quot;http://tinyletter.com/front-end-rapport/letters/front-end-rapport-21&quot;&gt;Front-end Rapport&lt;/a&gt; and the always lovely &lt;a href=&quot;http://sassnews.com&quot;&gt;SassNews&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s to more writing! :D&lt;/p&gt;
</description>
        <pubDate>Mon, 24 Nov 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/writing-sitepoint</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/writing-sitepoint</guid>
        
        
        <category>sitepoint</category>
        
      </item>
    
      <item>
        <title>Providing a fallback for critical-path CSS</title>
        <description>&lt;p&gt;The method I recently talked about using, for &lt;a href=&quot;/2014-10-27/critical-css.html&quot;&gt;loading non-critical CSS asynchronously&lt;/a&gt; via javascript, has one blindingly obvious fatal flaw: it fails when javascript is disabled.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/providing-a-fallback-for-criticalpath-css/shutup.gif&quot; alt=&quot;Shut up.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This is why you test things, kids.&lt;/p&gt;

&lt;p&gt;But there’s a simple way around it: provide a regular link to your CSS, but wrap it in a &amp;lt;noscript&amp;gt; tag.&lt;/p&gt;

&lt;p&gt;So, in addition to the existing LoadCSS chunk:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Async CSS loader&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;loadCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;use strict&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;link&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;before&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;script&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;only x&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;media&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;all&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ss&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;loadCSS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/theme/dist/stylesheets/main.css&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;we just have to add:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;noscript&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/theme/dist/stylesheets/main.css&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/noscript&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now the criticalpath CSS is no longer reliant on javascript executing. Just as it should be.&lt;/p&gt;
</description>
        <pubDate>Wed, 05 Nov 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/providing-fallback-criticalpath-css</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/providing-fallback-criticalpath-css</guid>
        
        
        <category>css</category>
        
        <category>criticalpath</category>
        
      </item>
    
      <item>
        <title>Making this site open</title>
        <description>&lt;p&gt;I remember what it was like when I was starting out with this web game. I didn’t have a clue how to build things, how to write code, how to optimise. Like all of us, I was clueless. What got me rapidly going was being able to look at the code of other sites via dev tools, and see how they did things.&lt;/p&gt;

&lt;p&gt;But that’s only part of the story. All you’re seeing there is generated code, not the code responsible for generating the site in the first place? How are new entrants to the field meant to learn if most things are hidden to them?&lt;/p&gt;

&lt;p&gt;It’s in that spirit that I’m making the source code for this site available publically, after it living for a year as a private Github repo.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/SonniesEdge/sonniesedge-site&quot;&gt;https://github.com/SonniesEdge/sonniesedge-site&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It’s not going to blow anybody’s mind, but it will hopefully benefit others on their jouney to see at least one more website being completely open.&lt;/p&gt;
</description>
        <pubDate>Tue, 28 Oct 2014 12:00:16 +0100</pubDate>
        <link>http://sonniesedge.co.uk/blog/making-site-open</link>
        <guid isPermaLink="true">http://sonniesedge.co.uk/blog/making-site-open</guid>
        
        
      </item>
    
  </channel>
</rss>
